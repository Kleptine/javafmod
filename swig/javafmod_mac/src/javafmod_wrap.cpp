/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


	
	#include "fmod_common.h"
	#include "fmod.h"
	#include "fmod_studio_common.h"
	#include "fmod.hpp"
	#include "fmod_studio.hpp"
	#include "fmod_errors.h"

SWIGINTERN void FMOD_ADVANCEDSETTINGS_init(FMOD_ADVANCEDSETTINGS *self){ 
    self->cbSize = sizeof(FMOD_ADVANCEDSETTINGS);
  }
SWIGINTERN void FMOD_STUDIO_ADVANCEDSETTINGS_init(FMOD_STUDIO_ADVANCEDSETTINGS *self){ 
    self->cbSize = sizeof(FMOD_STUDIO_ADVANCEDSETTINGS);
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00010512;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1RESULT_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_RESULT)FMOD_RESULT_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELCONTROL_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELCONTROL_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELCONTROL_TYPE)FMOD_CHANNELCONTROL_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1VECTOR_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_VECTOR *arg1 = (FMOD_VECTOR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_VECTOR **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1VECTOR_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_VECTOR *arg1 = (FMOD_VECTOR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_VECTOR **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1VECTOR_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_VECTOR *arg1 = (FMOD_VECTOR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_VECTOR **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1VECTOR_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_VECTOR *arg1 = (FMOD_VECTOR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_VECTOR **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1VECTOR_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_VECTOR *arg1 = (FMOD_VECTOR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_VECTOR **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1VECTOR_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_VECTOR *arg1 = (FMOD_VECTOR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_VECTOR **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1VECTOR(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_VECTOR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_VECTOR *)new FMOD_VECTOR();
  *(FMOD_VECTOR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1VECTOR(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_VECTOR *arg1 = (FMOD_VECTOR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_VECTOR **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  result = (FMOD_VECTOR *)& ((arg1)->position);
  *(FMOD_VECTOR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  if (arg1) (arg1)->velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  result = (FMOD_VECTOR *)& ((arg1)->velocity);
  *(FMOD_VECTOR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1forward_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  if (arg1) (arg1)->forward = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1forward_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  result = (FMOD_VECTOR *)& ((arg1)->forward);
  *(FMOD_VECTOR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1up_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  if (arg1) (arg1)->up = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1ATTRIBUTES_1up_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_VECTOR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  result = (FMOD_VECTOR *)& ((arg1)->up);
  *(FMOD_VECTOR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_13D_1ATTRIBUTES(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_3D_ATTRIBUTES *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_3D_ATTRIBUTES *)new FMOD_3D_ATTRIBUTES();
  *(FMOD_3D_ATTRIBUTES **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_13D_1ATTRIBUTES(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_3D_ATTRIBUTES *arg1 = (FMOD_3D_ATTRIBUTES *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_3D_ATTRIBUTES **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Data1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  result = (unsigned int) ((arg1)->Data1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Data2 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  result = (unsigned short) ((arg1)->Data2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Data3 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  result = (unsigned short) ((arg1)->Data3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->Data4;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1GUID_1Data4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_GUID **)&jarg1; 
  result = (unsigned char *)(unsigned char *) ((arg1)->Data4);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1GUID(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_GUID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_GUID *)new FMOD_GUID();
  *(FMOD_GUID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1GUID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_GUID *arg1 = (FMOD_GUID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GUID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (void *) ((arg1)->handle);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1sizebytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sizebytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1sizebytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->sizebytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (int) ((arg1)->priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1userdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->userdata = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1userdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (void *) ((arg1)->userdata);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->buffer = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (void *) ((arg1)->buffer);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1bytesread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bytesread = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1bytesread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->bytesread);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1done_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void (*arg2)(FMOD_ASYNCREADINFO *,FMOD_RESULT) = (void (*)(FMOD_ASYNCREADINFO *,FMOD_RESULT)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  arg2 = *(void (**)(FMOD_ASYNCREADINFO *,FMOD_RESULT))&jarg2; 
  if (arg1) (arg1)->done = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ASYNCREADINFO_1done_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  void (*result)(FMOD_ASYNCREADINFO *,FMOD_RESULT) = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  result = (void (*)(FMOD_ASYNCREADINFO *,FMOD_RESULT)) ((arg1)->done);
  *(void (**)(FMOD_ASYNCREADINFO *,FMOD_RESULT))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1ASYNCREADINFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_ASYNCREADINFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_ASYNCREADINFO *)new FMOD_ASYNCREADINFO();
  *(FMOD_ASYNCREADINFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1ASYNCREADINFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_ASYNCREADINFO *arg1 = (FMOD_ASYNCREADINFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ASYNCREADINFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OUTPUTTYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_OUTPUTTYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_OUTPUTTYPE)FMOD_OUTPUTTYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1MODE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_DEBUG_MODE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_DEBUG_MODE)FMOD_DEBUG_MODE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1LEVEL_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1LEVEL_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1LEVEL_1WARNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1LEVEL_1LOG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1TYPE_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000100;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1TYPE_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000200;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1TYPE_1CODEC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000400;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1TYPE_1TRACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000800;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1DISPLAY_1TIMESTAMPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00010000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1DISPLAY_1LINENUMBERS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00020000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEBUG_1DISPLAY_1THREAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00040000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1STREAM_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1STREAM_1DECODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1SAMPLEDATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1DSP_1BUFFER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000008;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1PLUGIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000010;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1XBOX360_1PHYSICAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00100000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1PERSISTENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00200000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1SECONDARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00400000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MEMORY_1ALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0xFFFFFFFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SPEAKERMODE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_SPEAKERMODE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_SPEAKERMODE)FMOD_SPEAKERMODE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SPEAKER_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_SPEAKER result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_SPEAKER)FMOD_SPEAKER_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1FRONT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1FRONT_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1FRONT_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1LOW_1FREQUENCY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000008;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1SURROUND_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000010;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1SURROUND_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000020;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1BACK_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000040;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1BACK_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000080;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1BACK_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000100;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1MONO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1STEREO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1LRC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002|0x00000004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1QUAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002|0x00000010|0x00000020);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_1SURROUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002|0x00000004|0x00000010|0x00000020);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_15POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002|0x00000004|0x00000008|0x00000010|0x00000020);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_15POINT1_1REARS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002|0x00000004|0x00000008|0x00000040|0x00000080);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_17POINT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002|0x00000004|0x00000010|0x00000020|0x00000040|0x00000080);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELMASK_17POINT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (0x00000001|0x00000002|0x00000004|0x00000008|0x00000010|0x00000020|0x00000040|0x00000080);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELORDER_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELORDER result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELORDER)FMOD_CHANNELORDER_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1PLUGINTYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_PLUGINTYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_PLUGINTYPE)FMOD_PLUGINTYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1STREAM_1FROM_1UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1MIX_1FROM_1UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_13D_1RIGHTHANDED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1CHANNEL_1LOWPASS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000100;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1CHANNEL_1DISTANCEFILTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000200;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1PROFILE_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00010000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1VOL0_1BECOMES_1VIRTUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00020000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1GEOMETRY_1USECLOSEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00040000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1PREFER_1DOLBY_1DOWNMIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00080000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1THREAD_1UNSAFE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00100000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1INIT_1PROFILE_1METER_1ALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00200000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SOUND_1TYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_SOUND_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_SOUND_TYPE)FMOD_SOUND_TYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SOUND_1FORMAT_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_SOUND_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_SOUND_FORMAT)FMOD_SOUND_FORMAT_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1LOOP_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1LOOP_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1LOOP_1BIDI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_12D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000008;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000010;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESTREAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000080;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESAMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000100;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATECOMPRESSEDSAMPLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000200;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OPENUSER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000400;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OPENMEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000800;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OPENMEMORY_1POINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x10000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OPENRAW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00001000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OPENONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00002000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ACCURATETIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00004000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1MPEGSEARCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00008000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1NONBLOCKING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00010000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1UNIQUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00020000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1HEADRELATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00040000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1WORLDRELATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00080000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1INVERSEROLLOFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00100000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1LINEARROLLOFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00200000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1LINEARSQUAREROLLOFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00400000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1INVERSETAPEREDROLLOFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00800000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1CUSTOMROLLOFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x04000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_13D_1IGNOREGEOMETRY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x40000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1IGNORETAGS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x02000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1LOWMEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x08000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1LOADSECONDARYRAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x20000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1VIRTUAL_1PLAYFROMSTART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x80000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OPENSTATE_1READY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_OPENSTATE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_OPENSTATE)FMOD_OPENSTATE_READY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1OPENSTATE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_OPENSTATE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_OPENSTATE)FMOD_OPENSTATE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SOUNDGROUP_1BEHAVIOR_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP_BEHAVIOR result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_SOUNDGROUP_BEHAVIOR)FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELCONTROL_1CALLBACK_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELCONTROL_CALLBACK_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELCONTROL_CALLBACK_TYPE)FMOD_CHANNELCONTROL_CALLBACK_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELCONTROL_1DSP_1HEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELCONTROL_DSP_INDEX result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELCONTROL_DSP_INDEX)FMOD_CHANNELCONTROL_DSP_HEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELCONTROL_1DSP_1FADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELCONTROL_DSP_INDEX result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELCONTROL_DSP_INDEX)FMOD_CHANNELCONTROL_DSP_FADER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELCONTROL_1DSP_1PANNER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELCONTROL_DSP_INDEX result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELCONTROL_DSP_INDEX)FMOD_CHANNELCONTROL_DSP_PANNER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELCONTROL_1DSP_1TAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELCONTROL_DSP_INDEX result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELCONTROL_DSP_INDEX)FMOD_CHANNELCONTROL_DSP_TAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CHANNELCONTROL_1DSP_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_CHANNELCONTROL_DSP_INDEX result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CHANNELCONTROL_DSP_INDEX)FMOD_CHANNELCONTROL_DSP_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INSTANCETYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_ERRORCALLBACK_INSTANCETYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_ERRORCALLBACK_INSTANCETYPE)FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1result_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  FMOD_RESULT arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  arg2 = (FMOD_RESULT)jarg2; 
  if (arg1) (arg1)->result = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1result_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  result = (FMOD_RESULT) ((arg1)->result);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1instancetype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  FMOD_ERRORCALLBACK_INSTANCETYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  arg2 = (FMOD_ERRORCALLBACK_INSTANCETYPE)jarg2; 
  if (arg1) (arg1)->instancetype = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1instancetype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  FMOD_ERRORCALLBACK_INSTANCETYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  result = (FMOD_ERRORCALLBACK_INSTANCETYPE) ((arg1)->instancetype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->instance = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  result = (void *) ((arg1)->instance);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1functionname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->functionname = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->functionname, (const char *)arg2);
    } else {
      arg1->functionname = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1functionname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  result = (char *) ((arg1)->functionname);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1functionparams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->functionparams = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->functionparams, (const char *)arg2);
    } else {
      arg1->functionparams = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1ERRORCALLBACK_1INFO_1functionparams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  result = (char *) ((arg1)->functionparams);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1ERRORCALLBACK_1INFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_ERRORCALLBACK_INFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_ERRORCALLBACK_INFO *)new FMOD_ERRORCALLBACK_INFO();
  *(FMOD_ERRORCALLBACK_INFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1ERRORCALLBACK_1INFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_ERRORCALLBACK_INFO *arg1 = (FMOD_ERRORCALLBACK_INFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ERRORCALLBACK_INFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1DEVICELISTCHANGED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1DEVICELOST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1MEMORYALLOCATIONFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1THREADCREATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000008;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1BADDSPCONNECTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000010;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1PREMIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000020;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1POSTMIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000040;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000080;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1MIDMIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000100;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1THREADDESTROYED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000200;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1PREUPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000400;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SYSTEM_1CALLBACK_1POSTUPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000800;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1RESAMPLER_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_DSP_RESAMPLER result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_DSP_RESAMPLER)FMOD_DSP_RESAMPLER_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPCONNECTION_1TYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_DSPCONNECTION_TYPE)FMOD_DSPCONNECTION_TYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAGTYPE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_TAGTYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_TAGTYPE)FMOD_TAGTYPE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAGTYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_TAGTYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_TAGTYPE)FMOD_TAGTYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAGDATATYPE_1BINARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_TAGDATATYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_TAGDATATYPE)FMOD_TAGDATATYPE_BINARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAGDATATYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_TAGDATATYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_TAGDATATYPE)FMOD_TAGDATATYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  FMOD_TAGTYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  arg2 = (FMOD_TAGTYPE)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  FMOD_TAGTYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  result = (FMOD_TAGTYPE) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1datatype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  FMOD_TAGDATATYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  arg2 = (FMOD_TAGDATATYPE)jarg2; 
  if (arg1) (arg1)->datatype = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1datatype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  FMOD_TAGDATATYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  result = (FMOD_TAGDATATYPE) ((arg1)->datatype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  result = (void *) ((arg1)->data);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1datalen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->datalen = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1datalen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  result = (unsigned int) ((arg1)->datalen);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1updated_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  FMOD_BOOL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  if (arg1) (arg1)->updated = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TAG_1updated_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  FMOD_BOOL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_TAG **)&jarg1; 
  result = (FMOD_BOOL) ((arg1)->updated);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1TAG(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_TAG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_TAG *)new FMOD_TAG();
  *(FMOD_TAG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1TAG(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_TAG *arg1 = (FMOD_TAG *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_TAG **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1MS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1PCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1PCMBYTES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1RAWBYTES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000008;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1PCMFRACTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000010;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1MODORDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000100;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1MODROW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000200;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1MODPATTERN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000400;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1TIMEUNIT_1BUFFERED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x10000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_fmod_javafmodJNI_FMOD_1PORT_1INDEX_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long long) -1ull;
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1cbsize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->cbsize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1cbsize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->cbsize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->length);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileoffset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->fileoffset = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileoffset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->fileoffset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1numchannels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numchannels = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1numchannels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->numchannels);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1defaultfrequency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->defaultfrequency = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1defaultfrequency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->defaultfrequency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1format_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_FORMAT arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (FMOD_SOUND_FORMAT)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1format_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_SOUND_FORMAT) ((arg1)->format);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1decodebuffersize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->decodebuffersize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1decodebuffersize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->decodebuffersize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialsubsound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->initialsubsound = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialsubsound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->initialsubsound);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1numsubsounds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numsubsounds = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1numsubsounds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->numsubsounds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1inclusionlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->inclusionlist = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1inclusionlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int *) ((arg1)->inclusionlist);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1inclusionlistnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->inclusionlistnum = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1inclusionlistnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->inclusionlistnum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1pcmreadcallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_PCMREAD_CALLBACK arg2 = (FMOD_SOUND_PCMREAD_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_SOUND_PCMREAD_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->pcmreadcallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1pcmreadcallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_PCMREAD_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_SOUND_PCMREAD_CALLBACK) ((arg1)->pcmreadcallback);
  *(FMOD_SOUND_PCMREAD_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1pcmsetposcallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_PCMSETPOS_CALLBACK arg2 = (FMOD_SOUND_PCMSETPOS_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_SOUND_PCMSETPOS_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->pcmsetposcallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1pcmsetposcallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_PCMSETPOS_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_SOUND_PCMSETPOS_CALLBACK) ((arg1)->pcmsetposcallback);
  *(FMOD_SOUND_PCMSETPOS_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1nonblockcallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_NONBLOCK_CALLBACK arg2 = (FMOD_SOUND_NONBLOCK_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_SOUND_NONBLOCK_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->nonblockcallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1nonblockcallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_NONBLOCK_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_SOUND_NONBLOCK_CALLBACK) ((arg1)->nonblockcallback);
  *(FMOD_SOUND_NONBLOCK_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1dlsname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->dlsname = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->dlsname, (const char *)arg2);
    } else {
      arg1->dlsname = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1dlsname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (char *) ((arg1)->dlsname);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1encryptionkey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->encryptionkey = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->encryptionkey, (const char *)arg2);
    } else {
      arg1->encryptionkey = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1encryptionkey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (char *) ((arg1)->encryptionkey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1maxpolyphony_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxpolyphony = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1maxpolyphony_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->maxpolyphony);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1userdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->userdata = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1userdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (void *) ((arg1)->userdata);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1suggestedsoundtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (FMOD_SOUND_TYPE)jarg2; 
  if (arg1) (arg1)->suggestedsoundtype = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1suggestedsoundtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_SOUND_TYPE) ((arg1)->suggestedsoundtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuseropen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_OPEN_CALLBACK arg2 = (FMOD_FILE_OPEN_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_FILE_OPEN_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->fileuseropen = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuseropen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_OPEN_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_FILE_OPEN_CALLBACK) ((arg1)->fileuseropen);
  *(FMOD_FILE_OPEN_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserclose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_CLOSE_CALLBACK arg2 = (FMOD_FILE_CLOSE_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_FILE_CLOSE_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->fileuserclose = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserclose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_CLOSE_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_FILE_CLOSE_CALLBACK) ((arg1)->fileuserclose);
  *(FMOD_FILE_CLOSE_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_READ_CALLBACK arg2 = (FMOD_FILE_READ_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_FILE_READ_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->fileuserread = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_READ_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_FILE_READ_CALLBACK) ((arg1)->fileuserread);
  *(FMOD_FILE_READ_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserseek_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_SEEK_CALLBACK arg2 = (FMOD_FILE_SEEK_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_FILE_SEEK_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->fileuserseek = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserseek_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_SEEK_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_FILE_SEEK_CALLBACK) ((arg1)->fileuserseek);
  *(FMOD_FILE_SEEK_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserasyncread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_ASYNCREAD_CALLBACK arg2 = (FMOD_FILE_ASYNCREAD_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_FILE_ASYNCREAD_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->fileuserasyncread = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserasyncread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_ASYNCREAD_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_FILE_ASYNCREAD_CALLBACK) ((arg1)->fileuserasyncread);
  *(FMOD_FILE_ASYNCREAD_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserasynccancel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_ASYNCCANCEL_CALLBACK arg2 = (FMOD_FILE_ASYNCCANCEL_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_FILE_ASYNCCANCEL_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->fileuserasynccancel = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserasynccancel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_FILE_ASYNCCANCEL_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_FILE_ASYNCCANCEL_CALLBACK) ((arg1)->fileuserasynccancel);
  *(FMOD_FILE_ASYNCCANCEL_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->fileuserdata = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1fileuserdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (void *) ((arg1)->fileuserdata);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1channelorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_CHANNELORDER arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (FMOD_CHANNELORDER)jarg2; 
  if (arg1) (arg1)->channelorder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1channelorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_CHANNELORDER result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_CHANNELORDER) ((arg1)->channelorder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1channelmask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_CHANNELMASK arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (FMOD_CHANNELMASK)jarg2; 
  if (arg1) (arg1)->channelmask = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1channelmask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_CHANNELMASK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_CHANNELMASK) ((arg1)->channelmask);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialsoundgroup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUNDGROUP *arg2 = (FMOD_SOUNDGROUP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = *(FMOD_SOUNDGROUP **)&jarg2; 
  if (arg1) (arg1)->initialsoundgroup = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialsoundgroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUNDGROUP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_SOUNDGROUP *) ((arg1)->initialsoundgroup);
  *(FMOD_SOUNDGROUP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialseekposition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->initialseekposition = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialseekposition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->initialseekposition);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialseekpostype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_TIMEUNIT arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (FMOD_TIMEUNIT)jarg2; 
  if (arg1) (arg1)->initialseekpostype = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1initialseekpostype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_TIMEUNIT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (FMOD_TIMEUNIT) ((arg1)->initialseekpostype);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1ignoresetfilesystem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ignoresetfilesystem = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1ignoresetfilesystem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->ignoresetfilesystem);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1audioqueuepolicy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->audioqueuepolicy = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1audioqueuepolicy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->audioqueuepolicy);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1minmidigranularity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->minmidigranularity = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1minmidigranularity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (unsigned int) ((arg1)->minmidigranularity);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1nonblockthreadid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nonblockthreadid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1CREATESOUNDEXINFO_1nonblockthreadid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  result = (int) ((arg1)->nonblockthreadid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1CREATESOUNDEXINFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_CREATESOUNDEXINFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_CREATESOUNDEXINFO *)new FMOD_CREATESOUNDEXINFO();
  *(FMOD_CREATESOUNDEXINFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1CREATESOUNDEXINFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_CREATESOUNDEXINFO *arg1 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CREATESOUNDEXINFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1DecayTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DecayTime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1DecayTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->DecayTime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1EarlyDelay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EarlyDelay = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1EarlyDelay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->EarlyDelay);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1LateDelay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->LateDelay = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1LateDelay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->LateDelay);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1HFReference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HFReference = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1HFReference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->HFReference);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1HFDecayRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HFDecayRatio = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1HFDecayRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->HFDecayRatio);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1Diffusion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Diffusion = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1Diffusion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->Diffusion);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1Density_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Density = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1Density_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->Density);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1LowShelfFrequency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->LowShelfFrequency = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1LowShelfFrequency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->LowShelfFrequency);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1LowShelfGain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->LowShelfGain = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1LowShelfGain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->LowShelfGain);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1HighCut_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HighCut = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1HighCut_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->HighCut);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1EarlyLateMix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EarlyLateMix = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1EarlyLateMix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->EarlyLateMix);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1WetLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->WetLevel = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1REVERB_1PROPERTIES_1WetLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  result = (float) ((arg1)->WetLevel);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1REVERB_1PROPERTIES(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_REVERB_PROPERTIES *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_REVERB_PROPERTIES *)new FMOD_REVERB_PROPERTIES();
  *(FMOD_REVERB_PROPERTIES **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1REVERB_1PROPERTIES(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_REVERB_PROPERTIES *arg1 = (FMOD_REVERB_PROPERTIES *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_REVERB_PROPERTIES **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1cbSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->cbSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1cbSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->cbSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxMPEGCodecs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxMPEGCodecs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxMPEGCodecs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->maxMPEGCodecs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxADPCMCodecs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxADPCMCodecs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxADPCMCodecs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->maxADPCMCodecs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxXMACodecs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxXMACodecs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxXMACodecs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->maxXMACodecs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxCELTCodecs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxCELTCodecs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxCELTCodecs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->maxCELTCodecs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxVorbisCodecs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxVorbisCodecs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxVorbisCodecs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->maxVorbisCodecs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxAT9Codecs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxAT9Codecs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxAT9Codecs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->maxAT9Codecs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxPCMCodecs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxPCMCodecs = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1maxPCMCodecs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->maxPCMCodecs);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1ASIONumChannels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ASIONumChannels = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1ASIONumChannels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->ASIONumChannels);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1ASIOChannelList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  char **arg2 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  if (arg1) (arg1)->ASIOChannelList = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1ASIOChannelList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (char **) ((arg1)->ASIOChannelList);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1ASIOSpeakerList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_SPEAKER *arg2 = (FMOD_SPEAKER *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = *(FMOD_SPEAKER **)&jarg2; 
  if (arg1) (arg1)->ASIOSpeakerList = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1ASIOSpeakerList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_SPEAKER *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (FMOD_SPEAKER *) ((arg1)->ASIOSpeakerList);
  *(FMOD_SPEAKER **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1HRTFMinAngle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HRTFMinAngle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1HRTFMinAngle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (float) ((arg1)->HRTFMinAngle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1HRTFMaxAngle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HRTFMaxAngle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1HRTFMaxAngle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (float) ((arg1)->HRTFMaxAngle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1HRTFFreq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HRTFFreq = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1HRTFFreq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (float) ((arg1)->HRTFFreq);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1vol0virtualvol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vol0virtualvol = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1vol0virtualvol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (float) ((arg1)->vol0virtualvol);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1defaultDecodeBufferSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->defaultDecodeBufferSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1defaultDecodeBufferSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->defaultDecodeBufferSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1profilePort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->profilePort = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1profilePort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned short) ((arg1)->profilePort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1geometryMaxFadeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->geometryMaxFadeTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1geometryMaxFadeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->geometryMaxFadeTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1distanceFilterCenterFreq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distanceFilterCenterFreq = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1distanceFilterCenterFreq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (float) ((arg1)->distanceFilterCenterFreq);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1reverb3Dinstance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->reverb3Dinstance = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1reverb3Dinstance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->reverb3Dinstance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1DSPBufferPoolSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DSPBufferPoolSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1DSPBufferPoolSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->DSPBufferPoolSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1stackSizeStream_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->stackSizeStream = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1stackSizeStream_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->stackSizeStream);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1stackSizeNonBlocking_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->stackSizeNonBlocking = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1stackSizeNonBlocking_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->stackSizeNonBlocking);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1stackSizeMixer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->stackSizeMixer = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1stackSizeMixer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->stackSizeMixer);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1resamplerMethod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_DSP_RESAMPLER arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (FMOD_DSP_RESAMPLER)jarg2; 
  if (arg1) (arg1)->resamplerMethod = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1resamplerMethod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_DSP_RESAMPLER result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (FMOD_DSP_RESAMPLER) ((arg1)->resamplerMethod);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1commandQueueSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->commandQueueSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1commandQueueSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->commandQueueSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1randomSeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->randomSeed = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1randomSeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->randomSeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1ADVANCEDSETTINGS_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  FMOD_ADVANCEDSETTINGS_init(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1ADVANCEDSETTINGS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_ADVANCEDSETTINGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_ADVANCEDSETTINGS *)new FMOD_ADVANCEDSETTINGS();
  *(FMOD_ADVANCEDSETTINGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1ADVANCEDSETTINGS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_ADVANCEDSETTINGS *arg1 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_ADVANCEDSETTINGS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Memory_1Initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  FMOD_MEMORY_ALLOC_CALLBACK arg3 = (FMOD_MEMORY_ALLOC_CALLBACK) 0 ;
  FMOD_MEMORY_REALLOC_CALLBACK arg4 = (FMOD_MEMORY_REALLOC_CALLBACK) 0 ;
  FMOD_MEMORY_FREE_CALLBACK arg5 = (FMOD_MEMORY_FREE_CALLBACK) 0 ;
  FMOD_MEMORY_TYPE arg6 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_MEMORY_ALLOC_CALLBACK *)&jarg3; 
  arg4 = *(FMOD_MEMORY_REALLOC_CALLBACK *)&jarg4; 
  arg5 = *(FMOD_MEMORY_FREE_CALLBACK *)&jarg5; 
  arg6 = (FMOD_MEMORY_TYPE)jarg6; 
  result = (FMOD_RESULT)FMOD_Memory_Initialize(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Memory_1GetStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_BOOL arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (FMOD_BOOL)jarg3; 
  result = (FMOD_RESULT)FMOD_Memory_GetStats(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Debug_1Initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  FMOD_DEBUG_FLAGS arg1 ;
  FMOD_DEBUG_MODE arg2 ;
  FMOD_DEBUG_CALLBACK arg3 = (FMOD_DEBUG_CALLBACK) 0 ;
  char *arg4 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FMOD_DEBUG_FLAGS)jarg1; 
  arg2 = (FMOD_DEBUG_MODE)jarg2; 
  arg3 = *(FMOD_DEBUG_CALLBACK *)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (FMOD_RESULT)FMOD_Debug_Initialize(arg1,arg2,arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1File_1SetDiskBusy(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (FMOD_RESULT)FMOD_File_SetDiskBusy(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1File_1GetDiskBusy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (FMOD_RESULT)FMOD_File_GetDiskBusy(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM **arg1 = (FMOD_SYSTEM **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM ***)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_Create(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_Release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_OUTPUTTYPE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (FMOD_OUTPUTTYPE)jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetOutput(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_OUTPUTTYPE *arg2 = (FMOD_OUTPUTTYPE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_OUTPUTTYPE **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetOutput(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetNumDrivers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetNumDrivers(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetDriverInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  FMOD_GUID *arg5 = (FMOD_GUID *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg7 = (FMOD_SPEAKERMODE *) 0 ;
  int *arg8 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(FMOD_GUID **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(FMOD_SPEAKERMODE **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (FMOD_RESULT)FMOD_System_GetDriverInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetDriver(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetDriver(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetSoftwareChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetSoftwareChannels(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetSoftwareChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetSoftwareChannels(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetSoftwareFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_SPEAKERMODE arg3 ;
  int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FMOD_SPEAKERMODE)jarg3; 
  arg4 = (int)jarg4; 
  result = (FMOD_RESULT)FMOD_System_SetSoftwareFormat(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetSoftwareFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg3 = (FMOD_SPEAKERMODE *) 0 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(FMOD_SPEAKERMODE **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)FMOD_System_GetSoftwareFormat(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetDSPBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_System_SetDSPBufferSize(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetDSPBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetDSPBufferSize(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jint jarg8) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_FILE_OPEN_CALLBACK arg2 = (FMOD_FILE_OPEN_CALLBACK) 0 ;
  FMOD_FILE_CLOSE_CALLBACK arg3 = (FMOD_FILE_CLOSE_CALLBACK) 0 ;
  FMOD_FILE_READ_CALLBACK arg4 = (FMOD_FILE_READ_CALLBACK) 0 ;
  FMOD_FILE_SEEK_CALLBACK arg5 = (FMOD_FILE_SEEK_CALLBACK) 0 ;
  FMOD_FILE_ASYNCREAD_CALLBACK arg6 = (FMOD_FILE_ASYNCREAD_CALLBACK) 0 ;
  FMOD_FILE_ASYNCCANCEL_CALLBACK arg7 = (FMOD_FILE_ASYNCCANCEL_CALLBACK) 0 ;
  int arg8 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_FILE_OPEN_CALLBACK *)&jarg2; 
  arg3 = *(FMOD_FILE_CLOSE_CALLBACK *)&jarg3; 
  arg4 = *(FMOD_FILE_READ_CALLBACK *)&jarg4; 
  arg5 = *(FMOD_FILE_SEEK_CALLBACK *)&jarg5; 
  arg6 = *(FMOD_FILE_ASYNCREAD_CALLBACK *)&jarg6; 
  arg7 = *(FMOD_FILE_ASYNCCANCEL_CALLBACK *)&jarg7; 
  arg8 = (int)jarg8; 
  result = (FMOD_RESULT)FMOD_System_SetFileSystem(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1AttachFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_FILE_OPEN_CALLBACK arg2 = (FMOD_FILE_OPEN_CALLBACK) 0 ;
  FMOD_FILE_CLOSE_CALLBACK arg3 = (FMOD_FILE_CLOSE_CALLBACK) 0 ;
  FMOD_FILE_READ_CALLBACK arg4 = (FMOD_FILE_READ_CALLBACK) 0 ;
  FMOD_FILE_SEEK_CALLBACK arg5 = (FMOD_FILE_SEEK_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_FILE_OPEN_CALLBACK *)&jarg2; 
  arg3 = *(FMOD_FILE_CLOSE_CALLBACK *)&jarg3; 
  arg4 = *(FMOD_FILE_READ_CALLBACK *)&jarg4; 
  arg5 = *(FMOD_FILE_SEEK_CALLBACK *)&jarg5; 
  result = (FMOD_RESULT)FMOD_System_AttachFileSystem(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetAdvancedSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_ADVANCEDSETTINGS *arg2 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_ADVANCEDSETTINGS **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetAdvancedSettings(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetAdvancedSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_ADVANCEDSETTINGS *arg2 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_ADVANCEDSETTINGS **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetAdvancedSettings(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_SYSTEM_CALLBACK arg2 = (FMOD_SYSTEM_CALLBACK) 0 ;
  FMOD_SYSTEM_CALLBACK_TYPE arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_SYSTEM_CALLBACK *)&jarg2; 
  arg3 = (FMOD_SYSTEM_CALLBACK_TYPE)jarg3; 
  result = (FMOD_RESULT)FMOD_System_SetCallback(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetPluginPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FMOD_RESULT)FMOD_System_SetPluginPath(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1LoadPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (FMOD_RESULT)FMOD_System_LoadPlugin(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1UnloadPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FMOD_RESULT)FMOD_System_UnloadPlugin(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetNumPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_PLUGINTYPE arg2 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (FMOD_PLUGINTYPE)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetNumPlugins(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetPluginHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_PLUGINTYPE arg2 ;
  int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (FMOD_PLUGINTYPE)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  result = (FMOD_RESULT)FMOD_System_GetPluginHandle(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetPluginInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int arg2 ;
  FMOD_PLUGINTYPE *arg3 = (FMOD_PLUGINTYPE *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(FMOD_PLUGINTYPE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  arg6 = *(unsigned int **)&jarg6; 
  result = (FMOD_RESULT)FMOD_System_GetPluginInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetOutputByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetOutputByPlugin(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetOutputByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetOutputByPlugin(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateDSPByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int arg2 ;
  FMOD_DSP **arg3 = (FMOD_DSP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(FMOD_DSP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_CreateDSPByPlugin(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetDSPInfoByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int arg2 ;
  FMOD_DSP_DESCRIPTION **arg3 = (FMOD_DSP_DESCRIPTION **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(FMOD_DSP_DESCRIPTION ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetDSPInfoByPlugin(arg1,arg2,(FMOD_DSP_DESCRIPTION const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1RegisterCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_CODEC_DESCRIPTION *arg2 = (FMOD_CODEC_DESCRIPTION *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_CODEC_DESCRIPTION **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (FMOD_RESULT)FMOD_System_RegisterCodec(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1RegisterDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_DSP_DESCRIPTION *arg2 = (FMOD_DSP_DESCRIPTION *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_DSP_DESCRIPTION **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_RegisterDSP(arg1,(FMOD_DSP_DESCRIPTION const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1RegisterOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_OUTPUT_DESCRIPTION *arg2 = (FMOD_OUTPUT_DESCRIPTION *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_OUTPUT_DESCRIPTION **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_RegisterOutput(arg1,(FMOD_OUTPUT_DESCRIPTION const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_INITFLAGS arg3 ;
  void *arg4 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FMOD_INITFLAGS)jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (FMOD_RESULT)FMOD_System_Init(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_Close(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_Update(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetSpeakerPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3, jfloat jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_SPEAKER arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_BOOL arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (FMOD_SPEAKER)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (FMOD_BOOL)jarg5; 
  result = (FMOD_RESULT)FMOD_System_SetSpeakerPosition(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetSpeakerPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_SPEAKER arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_BOOL *arg5 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (FMOD_SPEAKER)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(FMOD_BOOL **)&jarg5; 
  result = (FMOD_RESULT)FMOD_System_GetSpeakerPosition(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetStreamBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)FMOD_System_SetStreamBufferSize(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetStreamBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT *arg3 = (FMOD_TIMEUNIT *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = *(FMOD_TIMEUNIT **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetStreamBufferSize(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Set3DSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_System_Set3DSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Get3DSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_System_Get3DSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Set3DNumListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_System_Set3DNumListeners(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Get3DNumListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_Get3DNumListeners(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Set3DListenerAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg5 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg6 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  arg5 = *(FMOD_VECTOR **)&jarg5; 
  arg6 = *(FMOD_VECTOR **)&jarg6; 
  result = (FMOD_RESULT)FMOD_System_Set3DListenerAttributes(arg1,arg2,(FMOD_VECTOR const *)arg3,(FMOD_VECTOR const *)arg4,(FMOD_VECTOR const *)arg5,(FMOD_VECTOR const *)arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Get3DListenerAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg5 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg6 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  arg5 = *(FMOD_VECTOR **)&jarg5; 
  arg6 = *(FMOD_VECTOR **)&jarg6; 
  result = (FMOD_RESULT)FMOD_System_Get3DListenerAttributes(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1Set3DRolloffCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_3D_ROLLOFF_CALLBACK arg2 = (FMOD_3D_ROLLOFF_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_3D_ROLLOFF_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_Set3DRolloffCallback(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1MixerSuspend(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_MixerSuspend(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1MixerResume(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_MixerResume(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetVersion(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetOutputHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetOutputHandle(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetChannelsPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetChannelsPlaying(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetCPUUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  result = (FMOD_RESULT)FMOD_System_GetCPUUsage(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetSoundRAM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)FMOD_System_GetSoundRAM(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_MODE arg3 ;
  FMOD_CREATESOUNDEXINFO *arg4 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND **arg5 = (FMOD_SOUND **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (FMOD_MODE)jarg3; 
  arg4 = *(FMOD_CREATESOUNDEXINFO **)&jarg4; 
  arg5 = *(FMOD_SOUND ***)&jarg5; 
  result = (FMOD_RESULT)FMOD_System_CreateSound(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_MODE arg3 ;
  FMOD_CREATESOUNDEXINFO *arg4 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD_SOUND **arg5 = (FMOD_SOUND **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (FMOD_MODE)jarg3; 
  arg4 = *(FMOD_CREATESOUNDEXINFO **)&jarg4; 
  arg5 = *(FMOD_SOUND ***)&jarg5; 
  result = (FMOD_RESULT)FMOD_System_CreateStream(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_DSP_DESCRIPTION *arg2 = (FMOD_DSP_DESCRIPTION *) 0 ;
  FMOD_DSP **arg3 = (FMOD_DSP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_DSP_DESCRIPTION **)&jarg2; 
  arg3 = *(FMOD_DSP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_CreateDSP(arg1,(FMOD_DSP_DESCRIPTION const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateDSPByType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_DSP_TYPE arg2 ;
  FMOD_DSP **arg3 = (FMOD_DSP **) 0 ;
  FMOD_DSP_TYPE *argp2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  argp2 = *(FMOD_DSP_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FMOD_DSP_TYPE");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(FMOD_DSP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_CreateDSPByType(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_CHANNELGROUP **arg3 = (FMOD_CHANNELGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD_CHANNELGROUP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_CreateChannelGroup(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_SOUNDGROUP **arg3 = (FMOD_SOUNDGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD_SOUNDGROUP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_CreateSoundGroup(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateReverb3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_REVERB3D **arg2 = (FMOD_REVERB3D **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_REVERB3D ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_CreateReverb3D(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1PlaySound(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_SOUND *arg2 = (FMOD_SOUND *) 0 ;
  FMOD_CHANNELGROUP *arg3 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg4 ;
  FMOD_CHANNEL **arg5 = (FMOD_CHANNEL **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_SOUND **)&jarg2; 
  arg3 = *(FMOD_CHANNELGROUP **)&jarg3; 
  arg4 = (FMOD_BOOL)jarg4; 
  arg5 = *(FMOD_CHANNEL ***)&jarg5; 
  result = (FMOD_RESULT)FMOD_System_PlaySound(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1PlayDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  FMOD_CHANNELGROUP *arg3 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg4 ;
  FMOD_CHANNEL **arg5 = (FMOD_CHANNEL **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  arg3 = *(FMOD_CHANNELGROUP **)&jarg3; 
  arg4 = (FMOD_BOOL)jarg4; 
  arg5 = *(FMOD_CHANNEL ***)&jarg5; 
  result = (FMOD_RESULT)FMOD_System_PlayDSP(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_CHANNEL **arg3 = (FMOD_CHANNEL **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_CHANNEL ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetChannel(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetMasterChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_CHANNELGROUP **arg2 = (FMOD_CHANNELGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_CHANNELGROUP ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetMasterChannelGroup(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetMasterSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_SOUNDGROUP **arg2 = (FMOD_SOUNDGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_SOUNDGROUP ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetMasterSoundGroup(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1AttachChannelGroupToPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_PORT_TYPE arg2 ;
  FMOD_PORT_INDEX arg3 ;
  FMOD_CHANNELGROUP *arg4 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (FMOD_PORT_TYPE)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (FMOD_PORT_INDEX)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(FMOD_CHANNELGROUP **)&jarg4; 
  arg5 = (FMOD_BOOL)jarg5; 
  result = (FMOD_RESULT)FMOD_System_AttachChannelGroupToPort(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1DetachChannelGroupFromPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_CHANNELGROUP *arg2 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_CHANNELGROUP **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_DetachChannelGroupFromPort(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_REVERB_PROPERTIES *arg3 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_REVERB_PROPERTIES **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_SetReverbProperties(arg1,arg2,(FMOD_REVERB_PROPERTIES const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_REVERB_PROPERTIES *arg3 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_REVERB_PROPERTIES **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetReverbProperties(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1LockDSP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_LockDSP(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1UnlockDSP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  result = (FMOD_RESULT)FMOD_System_UnlockDSP(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetRecordNumDrivers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetRecordNumDrivers(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetRecordDriverInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  FMOD_GUID *arg5 = (FMOD_GUID *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg7 = (FMOD_SPEAKERMODE *) 0 ;
  int *arg8 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(FMOD_GUID **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(FMOD_SPEAKERMODE **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (FMOD_RESULT)FMOD_System_GetRecordDriverInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetRecordPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetRecordPosition(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1RecordStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_SOUND *arg3 = (FMOD_SOUND *) 0 ;
  FMOD_BOOL arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_SOUND **)&jarg3; 
  arg4 = (FMOD_BOOL)jarg4; 
  result = (FMOD_RESULT)FMOD_System_RecordStart(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1RecordStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_System_RecordStop(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1IsRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_BOOL *arg3 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_BOOL **)&jarg3; 
  result = (FMOD_RESULT)FMOD_System_IsRecording(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1CreateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD_GEOMETRY **arg4 = (FMOD_GEOMETRY **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_GEOMETRY ***)&jarg4; 
  result = (FMOD_RESULT)FMOD_System_CreateGeometry(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetGeometrySettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetGeometrySettings(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetGeometrySettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetGeometrySettings(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1LoadGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  FMOD_GEOMETRY **arg4 = (FMOD_GEOMETRY **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_GEOMETRY ***)&jarg4; 
  result = (FMOD_RESULT)FMOD_System_LoadGeometry(arg1,(void const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetGeometryOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  result = (FMOD_RESULT)FMOD_System_GetGeometryOcclusion(arg1,(FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetNetworkProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FMOD_RESULT)FMOD_System_SetNetworkProxy(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetNetworkProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_System_GetNetworkProxy(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetNetworkTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetNetworkTimeout(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetNetworkTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetNetworkTimeout(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SYSTEM *arg1 = (FMOD_SYSTEM *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SYSTEM **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_System_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  result = (FMOD_RESULT)FMOD_Sound_Release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_SYSTEM **arg2 = (FMOD_SYSTEM **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_SYSTEM ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetSystemObject(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void **arg4 = (void **) 0 ;
  void **arg5 = (void **) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  unsigned int *arg7 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(void ***)&jarg4; 
  arg5 = *(void ***)&jarg5; 
  arg6 = *(unsigned int **)&jarg6; 
  arg7 = *(unsigned int **)&jarg7; 
  result = (FMOD_RESULT)FMOD_Sound_Lock(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (FMOD_RESULT)FMOD_Sound_Unlock(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float arg2 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_SetDefaults(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_GetDefaults(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Set3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_Set3DMinMaxDistance(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Get3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_Get3DMinMaxDistance(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Set3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_Sound_Set3DConeSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Get3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Sound_Get3DConeSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Set3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_Set3DCustomRolloff(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1Get3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_VECTOR **arg2 = (FMOD_VECTOR **) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_VECTOR ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_Get3DCustomRolloff(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetSubSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int arg2 ;
  FMOD_SOUND *arg3 = (FMOD_SOUND *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_SOUND **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_SetSubSound(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetSubSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int arg2 ;
  FMOD_SOUND **arg3 = (FMOD_SOUND **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_SOUND ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_GetSubSound(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetSubSoundParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_SOUND **arg2 = (FMOD_SOUND **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_SOUND ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetSubSoundParent(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_GetName(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_GetLength(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_SOUND_TYPE *arg2 = (FMOD_SOUND_TYPE *) 0 ;
  FMOD_SOUND_FORMAT *arg3 = (FMOD_SOUND_FORMAT *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_SOUND_TYPE **)&jarg2; 
  arg3 = *(FMOD_SOUND_FORMAT **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  result = (FMOD_RESULT)FMOD_Sound_GetFormat(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetNumSubSounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetNumSubSounds(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetNumTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_GetNumTags(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_TAG *arg4 = (FMOD_TAG *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_TAG **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Sound_GetTag(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetOpenState(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_OPENSTATE *arg2 = (FMOD_OPENSTATE *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_BOOL *arg4 = (FMOD_BOOL *) 0 ;
  FMOD_BOOL *arg5 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_OPENSTATE **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = *(FMOD_BOOL **)&jarg4; 
  arg5 = *(FMOD_BOOL **)&jarg5; 
  result = (FMOD_RESULT)FMOD_Sound_GetOpenState(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1ReadData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Sound_ReadData(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SeekData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  unsigned int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_SeekData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_SOUNDGROUP *arg2 = (FMOD_SOUNDGROUP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_SOUNDGROUP **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_SetSoundGroup(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_SOUNDGROUP **arg2 = (FMOD_SOUNDGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_SOUNDGROUP ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetSoundGroup(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetNumSyncPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetNumSyncPoints(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetSyncPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int arg2 ;
  FMOD_SYNCPOINT **arg3 = (FMOD_SYNCPOINT **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_SYNCPOINT ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_GetSyncPoint(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetSyncPointInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_SYNCPOINT *arg2 = (FMOD_SYNCPOINT *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg6 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_SYNCPOINT **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(unsigned int **)&jarg5; 
  arg6 = (FMOD_TIMEUNIT)jarg6; 
  result = (FMOD_RESULT)FMOD_Sound_GetSyncPointInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1AddSyncPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  char *arg4 = (char *) 0 ;
  FMOD_SYNCPOINT **arg5 = (FMOD_SYNCPOINT **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(FMOD_SYNCPOINT ***)&jarg5; 
  result = (FMOD_RESULT)FMOD_Sound_AddSyncPoint(arg1,arg2,arg3,(char const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1DeleteSyncPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_SYNCPOINT *arg2 = (FMOD_SYNCPOINT *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_SYNCPOINT **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_DeleteSyncPoint(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (FMOD_MODE)jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_SetMode(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  FMOD_MODE *arg2 = (FMOD_MODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(FMOD_MODE **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetMode(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_SetLoopCount(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetLoopCount(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int arg4 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)FMOD_Sound_SetLoopPoints(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)FMOD_Sound_GetLoopPoints(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetMusicNumChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetMusicNumChannels(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetMusicChannelVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_SetMusicChannelVolume(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetMusicChannelVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Sound_GetMusicChannelVolume(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetMusicSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_SetMusicSpeed(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetMusicSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetMusicSpeed(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Sound_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUND *arg1 = (FMOD_SOUND *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUND **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Sound_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_SYSTEM **arg2 = (FMOD_SYSTEM **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_SYSTEM ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetSystemObject(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Stop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  result = (FMOD_RESULT)FMOD_Channel_Stop(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetPaused(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetPaused(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetVolume(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetVolume(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetVolumeRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetVolumeRamp(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetVolumeRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetVolumeRamp(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetAudibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetAudibility(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetPitch(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetPitch(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetMute(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetMute(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_SetReverbProperties(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_GetReverbProperties(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetLowPassGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetLowPassGain(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetLowPassGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetLowPassGain(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (FMOD_MODE)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetMode(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_MODE *arg2 = (FMOD_MODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_MODE **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetMode(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_CHANNELCONTROL_CALLBACK arg2 = (FMOD_CHANNELCONTROL_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_CHANNELCONTROL_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetCallback(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1IsPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_IsPlaying(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetPan(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetMixLevelsOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (FMOD_RESULT)FMOD_Channel_SetMixLevelsOutput(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetMixLevelsInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_SetMixLevelsInput(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetMixMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_Channel_SetMixMatrix(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetMixMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_Channel_GetMixMatrix(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetDSPClock(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(unsigned long long **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_GetDSPClock(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jobject jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  FMOD_BOOL arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = (FMOD_BOOL)jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_SetDelay(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  FMOD_BOOL *arg4 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(unsigned long long **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  arg4 = *(FMOD_BOOL **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_GetDelay(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1AddFadePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned long long arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_AddFadePoint(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetFadePointRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned long long arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_SetFadePointRamp(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1RemoveFadePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (FMOD_RESULT)FMOD_Channel_RemoveFadePoints(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetFadePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_GetFadePoints(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int arg2 ;
  FMOD_DSP **arg3 = (FMOD_DSP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_GetDSP(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1AddDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int arg2 ;
  FMOD_DSP *arg3 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_AddDSP(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1RemoveDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_RemoveDSP(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetNumDSPs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetNumDSPs(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetDSPIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_SetDSPIndex(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetDSPIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_GetDSPIndex(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1OverridePanDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_OverridePanDSP(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DAttributes(arg1,(FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3,(FMOD_VECTOR const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DAttributes(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DMinMaxDistance(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DMinMaxDistance(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DConeSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DConeSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DConeOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DConeOrientation(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DConeOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DConeOrientation(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DCustomRolloff(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_VECTOR **arg2 = (FMOD_VECTOR **) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_VECTOR ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DCustomRolloff(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DOcclusion(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DOcclusion(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DSpread(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DSpread(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DSpread(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DSpread(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DDopplerLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DDopplerLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DDopplerLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DDopplerLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Set3DDistanceFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_Set3DDistanceFilter(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1Get3DDistanceFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Channel_Get3DDistanceFilter(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetFrequency(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetFrequency(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetPriority(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetPriority(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_SetPosition(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)FMOD_Channel_GetPosition(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_CHANNELGROUP *arg2 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_CHANNELGROUP **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetChannelGroup(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_CHANNELGROUP **arg2 = (FMOD_CHANNELGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_CHANNELGROUP ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetChannelGroup(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_SetLoopCount(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetLoopCount(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1SetLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int arg4 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)FMOD_Channel_SetLoopPoints(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)FMOD_Channel_GetLoopPoints(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1IsVirtual(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_IsVirtual(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetCurrentSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  FMOD_SOUND **arg2 = (FMOD_SOUND **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(FMOD_SOUND ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetCurrentSound(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Channel_1GetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNEL *arg1 = (FMOD_CHANNEL *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNEL **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Channel_GetIndex(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_SYSTEM **arg2 = (FMOD_SYSTEM **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_SYSTEM ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetSystemObject(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Stop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Stop(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetPaused(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetPaused(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetVolume(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetVolume(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetVolumeRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetVolumeRamp(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetVolumeRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetVolumeRamp(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetAudibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetAudibility(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetPitch(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetPitch(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetMute(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetMute(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetReverbProperties(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetReverbProperties(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetLowPassGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetLowPassGain(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetLowPassGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetLowPassGain(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (FMOD_MODE)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetMode(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_MODE *arg2 = (FMOD_MODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_MODE **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetMode(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_CHANNELCONTROL_CALLBACK arg2 = (FMOD_CHANNELCONTROL_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_CHANNELCONTROL_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetCallback(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1IsPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_IsPlaying(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetPan(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetMixLevelsOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetMixLevelsOutput(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetMixLevelsInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetMixLevelsInput(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetMixMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetMixMatrix(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetMixMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetMixMatrix(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetDSPClock(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(unsigned long long **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetDSPClock(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jobject jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  FMOD_BOOL arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = (FMOD_BOOL)jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetDelay(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  FMOD_BOOL *arg4 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(unsigned long long **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  arg4 = *(FMOD_BOOL **)&jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetDelay(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1AddFadePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  unsigned long long arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_AddFadePoint(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetFadePointRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  unsigned long long arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetFadePointRamp(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1RemoveFadePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (FMOD_RESULT)FMOD_ChannelGroup_RemoveFadePoints(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetFadePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetFadePoints(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int arg2 ;
  FMOD_DSP **arg3 = (FMOD_DSP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetDSP(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1AddDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int arg2 ;
  FMOD_DSP *arg3 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP **)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_AddDSP(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1RemoveDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_RemoveDSP(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetNumDSPs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetNumDSPs(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetDSPIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetDSPIndex(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetDSPIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetDSPIndex(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1OverridePanDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_OverridePanDSP(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DAttributes(arg1,(FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3,(FMOD_VECTOR const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DAttributes(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DMinMaxDistance(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DMinMaxDistance(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DConeSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DConeSettings(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DConeOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DConeOrientation(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DConeOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DConeOrientation(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DCustomRolloff(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_VECTOR **arg2 = (FMOD_VECTOR **) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_VECTOR ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DCustomRolloff(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DOcclusion(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DOcclusion(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DSpread(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DSpread(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DSpread(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DSpread(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DDopplerLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DDopplerLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DDopplerLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DDopplerLevel(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Set3DDistanceFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Set3DDistanceFilter(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Get3DDistanceFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Get3DDistanceFilter(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_Release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1AddGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_CHANNELGROUP *arg2 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_BOOL arg3 ;
  FMOD_DSPCONNECTION **arg4 = (FMOD_DSPCONNECTION **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_CHANNELGROUP **)&jarg2; 
  arg3 = (FMOD_BOOL)jarg3; 
  arg4 = *(FMOD_DSPCONNECTION ***)&jarg4; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_AddGroup(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetNumGroups(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int arg2 ;
  FMOD_CHANNELGROUP **arg3 = (FMOD_CHANNELGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_CHANNELGROUP ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetGroup(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  FMOD_CHANNELGROUP **arg2 = (FMOD_CHANNELGROUP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(FMOD_CHANNELGROUP ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetParentGroup(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetName(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetNumChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetNumChannels(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1ChannelGroup_1GetChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_CHANNELGROUP *arg1 = (FMOD_CHANNELGROUP *) 0 ;
  int arg2 ;
  FMOD_CHANNEL **arg3 = (FMOD_CHANNEL **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_CHANNELGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_CHANNEL ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_ChannelGroup_GetChannel(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  result = (FMOD_RESULT)FMOD_SoundGroup_Release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  FMOD_SYSTEM **arg2 = (FMOD_SYSTEM **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(FMOD_SYSTEM ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetSystemObject(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1SetMaxAudible(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_SetMaxAudible(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetMaxAudible(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetMaxAudible(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1SetMaxAudibleBehavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  FMOD_SOUNDGROUP_BEHAVIOR arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = (FMOD_SOUNDGROUP_BEHAVIOR)jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_SetMaxAudibleBehavior(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetMaxAudibleBehavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  FMOD_SOUNDGROUP_BEHAVIOR *arg2 = (FMOD_SOUNDGROUP_BEHAVIOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(FMOD_SOUNDGROUP_BEHAVIOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetMaxAudibleBehavior(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1SetMuteFadeSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_SetMuteFadeSpeed(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetMuteFadeSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetMuteFadeSpeed(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1SetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_SetVolume(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetVolume(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1Stop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  result = (FMOD_RESULT)FMOD_SoundGroup_Stop(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetName(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetNumSounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetNumSounds(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  int arg2 ;
  FMOD_SOUND **arg3 = (FMOD_SOUND **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_SOUND ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetSound(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetNumPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetNumPlaying(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1SoundGroup_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_SOUNDGROUP *arg1 = (FMOD_SOUNDGROUP *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_SOUNDGROUP **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_SoundGroup_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  result = (FMOD_RESULT)FMOD_DSP_Release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_SYSTEM **arg2 = (FMOD_SYSTEM **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_SYSTEM ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetSystemObject(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1AddInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  FMOD_DSPCONNECTION **arg3 = (FMOD_DSPCONNECTION **) 0 ;
  FMOD_DSPCONNECTION_TYPE arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  arg3 = *(FMOD_DSPCONNECTION ***)&jarg3; 
  arg4 = (FMOD_DSPCONNECTION_TYPE)jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_AddInput(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1DisconnectFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  FMOD_DSPCONNECTION *arg3 = (FMOD_DSPCONNECTION *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  arg3 = *(FMOD_DSPCONNECTION **)&jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_DisconnectFrom(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1DisconnectAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_BOOL arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  arg3 = (FMOD_BOOL)jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_DisconnectAll(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetNumInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetNumInputs(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetNumOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetNumOutputs(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  FMOD_DSP **arg3 = (FMOD_DSP **) 0 ;
  FMOD_DSPCONNECTION **arg4 = (FMOD_DSPCONNECTION **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP ***)&jarg3; 
  arg4 = *(FMOD_DSPCONNECTION ***)&jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_GetInput(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  FMOD_DSP **arg3 = (FMOD_DSP **) 0 ;
  FMOD_DSPCONNECTION **arg4 = (FMOD_DSPCONNECTION **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP ***)&jarg3; 
  arg4 = *(FMOD_DSPCONNECTION ***)&jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_GetOutput(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_SetActive(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetActive(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetBypass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_SetBypass(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetBypass(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetBypass(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetWetDryMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_SetWetDryMix(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetWetDryMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_GetWetDryMix(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetChannelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_CHANNELMASK arg2 ;
  int arg3 ;
  FMOD_SPEAKERMODE arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (FMOD_CHANNELMASK)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (FMOD_SPEAKERMODE)jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_SetChannelFormat(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetChannelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_CHANNELMASK *arg2 = (FMOD_CHANNELMASK *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg4 = (FMOD_SPEAKERMODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_CHANNELMASK **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(FMOD_SPEAKERMODE **)&jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_GetChannelFormat(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetOutputChannelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_CHANNELMASK arg2 ;
  int arg3 ;
  FMOD_SPEAKERMODE arg4 ;
  FMOD_CHANNELMASK *arg5 = (FMOD_CHANNELMASK *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg7 = (FMOD_SPEAKERMODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (FMOD_CHANNELMASK)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (FMOD_SPEAKERMODE)jarg4; 
  arg5 = *(FMOD_CHANNELMASK **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(FMOD_SPEAKERMODE **)&jarg7; 
  result = (FMOD_RESULT)FMOD_DSP_GetOutputChannelFormat(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  result = (FMOD_RESULT)FMOD_DSP_Reset(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetParameterFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_SetParameterFloat(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetParameterInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_SetParameterInt(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetParameterBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  FMOD_BOOL arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FMOD_BOOL)jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_SetParameterBool(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetParameterData(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (FMOD_RESULT)FMOD_DSP_SetParameterData(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetParameterFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_DSP_GetParameterFloat(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetParameterInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_DSP_GetParameterInt(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetParameterBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  FMOD_BOOL *arg3 = (FMOD_BOOL *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_BOOL **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_DSP_GetParameterBool(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetParameterData(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jint jarg6) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  void **arg3 = (void **) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (int)jarg6; 
  result = (FMOD_RESULT)FMOD_DSP_GetParameterData(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetNumParameters(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetParameterInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  FMOD_DSP_PARAMETER_DESC **arg3 = (FMOD_DSP_PARAMETER_DESC **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP_PARAMETER_DESC ***)&jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_GetParameterInfo(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetDataParameterIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_GetDataParameterIndex(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1ShowConfigDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_BOOL arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (FMOD_BOOL)jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_ShowConfigDialog(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  result = (FMOD_RESULT)FMOD_DSP_GetInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_DSP_TYPE *arg2 = (FMOD_DSP_TYPE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_DSP_TYPE **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetType(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetIdle(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetIdle(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSP_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1SetMeteringEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_BOOL arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  arg3 = (FMOD_BOOL)jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_SetMeteringEnabled(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetMeteringEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_BOOL *arg3 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  arg3 = *(FMOD_BOOL **)&jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_GetMeteringEnabled(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSP_1GetMeteringInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_DSP *arg1 = (FMOD_DSP *) 0 ;
  FMOD_DSP_METERING_INFO *arg2 = (FMOD_DSP_METERING_INFO *) 0 ;
  FMOD_DSP_METERING_INFO *arg3 = (FMOD_DSP_METERING_INFO *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSP **)&jarg1; 
  arg2 = *(FMOD_DSP_METERING_INFO **)&jarg2; 
  arg3 = *(FMOD_DSP_METERING_INFO **)&jarg3; 
  result = (FMOD_RESULT)FMOD_DSP_GetMeteringInfo(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1GetInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  FMOD_DSP **arg2 = (FMOD_DSP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(FMOD_DSP ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSPConnection_GetInput(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1GetOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  FMOD_DSP **arg2 = (FMOD_DSP **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(FMOD_DSP ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSPConnection_GetOutput(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1SetMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)FMOD_DSPConnection_SetMix(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1GetMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSPConnection_GetMix(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1SetMixMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_DSPConnection_SetMixMatrix(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1GetMixMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)FMOD_DSPConnection_GetMixMatrix(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  FMOD_DSPCONNECTION_TYPE *arg2 = (FMOD_DSPCONNECTION_TYPE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(FMOD_DSPCONNECTION_TYPE **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSPConnection_GetType(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSPConnection_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1DSPConnection_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_DSPCONNECTION *arg1 = (FMOD_DSPCONNECTION *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_DSPCONNECTION **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_DSPConnection_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  result = (FMOD_RESULT)FMOD_Geometry_Release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1AddPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2, jfloat jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_BOOL arg4 ;
  int arg5 ;
  FMOD_VECTOR *arg6 = (FMOD_VECTOR *) 0 ;
  int *arg7 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (FMOD_BOOL)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(FMOD_VECTOR **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  result = (FMOD_RESULT)FMOD_Geometry_AddPolygon(arg1,arg2,arg3,arg4,arg5,(FMOD_VECTOR const *)arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetNumPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_GetNumPolygons(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetMaxPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Geometry_GetMaxPolygons(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetPolygonNumVertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Geometry_GetPolygonNumVertices(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1SetPolygonVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Geometry_SetPolygonVertex(arg1,arg2,arg3,(FMOD_VECTOR const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetPolygonVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Geometry_GetPolygonVertex(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1SetPolygonAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3, jfloat jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_BOOL arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (FMOD_BOOL)jarg5; 
  result = (FMOD_RESULT)FMOD_Geometry_SetPolygonAttributes(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetPolygonAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_BOOL *arg5 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(FMOD_BOOL **)&jarg5; 
  result = (FMOD_RESULT)FMOD_Geometry_GetPolygonAttributes(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1SetActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_SetActive(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_GetActive(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1SetRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Geometry_SetRotation(arg1,(FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Geometry_GetRotation(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1SetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_SetPosition(arg1,(FMOD_VECTOR const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_GetPosition(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1SetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_SetScale(arg1,(FMOD_VECTOR const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_GetScale(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1Save(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  void *arg2 = (void *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)FMOD_Geometry_Save(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Geometry_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_GEOMETRY *arg1 = (FMOD_GEOMETRY *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_GEOMETRY **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Geometry_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1Release(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  result = (FMOD_RESULT)FMOD_Reverb3D_Release(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1Set3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)FMOD_Reverb3D_Set3DAttributes(arg1,(FMOD_VECTOR const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1Get3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)FMOD_Reverb3D_Get3DAttributes(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1SetProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  FMOD_REVERB_PROPERTIES *arg2 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = *(FMOD_REVERB_PROPERTIES **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Reverb3D_SetProperties(arg1,(FMOD_REVERB_PROPERTIES const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1GetProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  FMOD_REVERB_PROPERTIES *arg2 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = *(FMOD_REVERB_PROPERTIES **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Reverb3D_GetProperties(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1SetActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  FMOD_BOOL arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = (FMOD_BOOL)jarg2; 
  result = (FMOD_RESULT)FMOD_Reverb3D_SetActive(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1GetActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  FMOD_BOOL *arg2 = (FMOD_BOOL *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = *(FMOD_BOOL **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Reverb3D_GetActive(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1SetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)FMOD_Reverb3D_SetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1Reverb3D_1GetUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD_REVERB3D *arg1 = (FMOD_REVERB3D *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_REVERB3D **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)FMOD_Reverb3D_GetUserData(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1INIT_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1INIT_1LIVEUPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1INIT_1ALLOW_1MISSING_1PLUGINS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1INIT_1SYNCHRONOUS_1UPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000004;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1LOADING_1STATE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_LOADING_STATE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_LOADING_STATE)FMOD_STUDIO_LOADING_STATE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1LOAD_1MEMORY_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_LOAD_MEMORY_MODE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_LOAD_MEMORY_MODE)FMOD_STUDIO_LOAD_MEMORY_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_PARAMETER_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_PARAMETER_TYPE)FMOD_STUDIO_PARAMETER_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  result = (int) ((arg1)->size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1userData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1userData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  result = (void *) ((arg1)->userData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1userDataLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->userDataLength = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1userDataLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  result = (int) ((arg1)->userDataLength);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1openCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_OPEN_CALLBACK arg2 = (FMOD_FILE_OPEN_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  arg2 = *(FMOD_FILE_OPEN_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->openCallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1openCallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_OPEN_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  result = (FMOD_FILE_OPEN_CALLBACK) ((arg1)->openCallback);
  *(FMOD_FILE_OPEN_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1closeCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_CLOSE_CALLBACK arg2 = (FMOD_FILE_CLOSE_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  arg2 = *(FMOD_FILE_CLOSE_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->closeCallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1closeCallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_CLOSE_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  result = (FMOD_FILE_CLOSE_CALLBACK) ((arg1)->closeCallback);
  *(FMOD_FILE_CLOSE_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1readCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_READ_CALLBACK arg2 = (FMOD_FILE_READ_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  arg2 = *(FMOD_FILE_READ_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->readCallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1readCallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_READ_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  result = (FMOD_FILE_READ_CALLBACK) ((arg1)->readCallback);
  *(FMOD_FILE_READ_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1seekCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_SEEK_CALLBACK arg2 = (FMOD_FILE_SEEK_CALLBACK) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  arg2 = *(FMOD_FILE_SEEK_CALLBACK *)&jarg2; 
  if (arg1) (arg1)->seekCallback = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BANK_1INFO_1seekCallback_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_FILE_SEEK_CALLBACK result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  result = (FMOD_FILE_SEEK_CALLBACK) ((arg1)->seekCallback);
  *(FMOD_FILE_SEEK_CALLBACK *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1BANK_1INFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BANK_INFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_BANK_INFO *)new FMOD_STUDIO_BANK_INFO();
  *(FMOD_STUDIO_BANK_INFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1BANK_1INFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_BANK_INFO *arg1 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_BANK_INFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1minimum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minimum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1minimum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  result = (float) ((arg1)->minimum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1maximum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maximum = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1maximum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  result = (float) ((arg1)->maximum);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  FMOD_STUDIO_PARAMETER_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  arg2 = (FMOD_STUDIO_PARAMETER_TYPE)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PARAMETER_1DESCRIPTION_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  FMOD_STUDIO_PARAMETER_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  result = (FMOD_STUDIO_PARAMETER_TYPE) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1PARAMETER_1DESCRIPTION(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_PARAMETER_DESCRIPTION *)new FMOD_STUDIO_PARAMETER_DESCRIPTION();
  *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1PARAMETER_1DESCRIPTION(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg1 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1USER_1PROPERTY_1TYPE_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_USER_PROPERTY_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_USER_PROPERTY_TYPE)FMOD_STUDIO_USER_PROPERTY_TYPE_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1EVENT_1PROPERTY_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_EVENT_PROPERTY result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_EVENT_PROPERTY)FMOD_STUDIO_EVENT_PROPERTY_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1USER_1PROPERTY_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_STUDIO_USER_PROPERTY *arg1 = (FMOD_STUDIO_USER_PROPERTY *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_USER_PROPERTY **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1USER_1PROPERTY_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_STUDIO_USER_PROPERTY *arg1 = (FMOD_STUDIO_USER_PROPERTY *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_USER_PROPERTY **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1USER_1PROPERTY_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_USER_PROPERTY *arg1 = (FMOD_STUDIO_USER_PROPERTY *) 0 ;
  FMOD_STUDIO_USER_PROPERTY_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_USER_PROPERTY **)&jarg1; 
  arg2 = (FMOD_STUDIO_USER_PROPERTY_TYPE)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1USER_1PROPERTY_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_USER_PROPERTY *arg1 = (FMOD_STUDIO_USER_PROPERTY *) 0 ;
  FMOD_STUDIO_USER_PROPERTY_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_USER_PROPERTY **)&jarg1; 
  result = (FMOD_STUDIO_USER_PROPERTY_TYPE) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1USER_1PROPERTY(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_USER_PROPERTY *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_USER_PROPERTY *)new FMOD_STUDIO_USER_PROPERTY();
  *(FMOD_STUDIO_USER_PROPERTY **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1USER_1PROPERTY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_USER_PROPERTY *arg1 = (FMOD_STUDIO_USER_PROPERTY *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_USER_PROPERTY **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SYSTEM_1CALLBACK_1PREUPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SYSTEM_1CALLBACK_1POSTUPDATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000002;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1EVENT_1CALLBACK_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_EVENT_CALLBACK_TYPE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_EVENT_CALLBACK_TYPE)FMOD_STUDIO_EVENT_CALLBACK_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *arg1 = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *arg1 = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES_1sound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *arg1 = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *) 0 ;
  FMOD_SOUND *arg2 = (FMOD_SOUND *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jarg1; 
  arg2 = *(FMOD_SOUND **)&jarg2; 
  if (arg1) (arg1)->sound = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES_1sound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *arg1 = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *) 0 ;
  FMOD_SOUND *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jarg1; 
  result = (FMOD_SOUND *) ((arg1)->sound);
  *(FMOD_SOUND **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES_1subsoundIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *arg1 = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->subsoundIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES_1subsoundIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *arg1 = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jarg1; 
  result = (int) ((arg1)->subsoundIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *)new FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES();
  *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1PROGRAMMER_1SOUND_1PROPERTIES(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *arg1 = (FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PLUGIN_1INSTANCE_1PROPERTIES_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *arg1 = (FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PLUGIN_1INSTANCE_1PROPERTIES_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *arg1 = (FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PLUGIN_1INSTANCE_1PROPERTIES_1dsp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *arg1 = (FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *) 0 ;
  FMOD_DSP *arg2 = (FMOD_DSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES **)&jarg1; 
  arg2 = *(FMOD_DSP **)&jarg2; 
  if (arg1) (arg1)->dsp = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PLUGIN_1INSTANCE_1PROPERTIES_1dsp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *arg1 = (FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *) 0 ;
  FMOD_DSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES **)&jarg1; 
  result = (FMOD_DSP *) ((arg1)->dsp);
  *(FMOD_DSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1PLUGIN_1INSTANCE_1PROPERTIES(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *)new FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES();
  *(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1PLUGIN_1INSTANCE_1PROPERTIES(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *arg1 = (FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1PLAYBACK_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_PLAYBACK_STATE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_PLAYBACK_STATE)FMOD_STUDIO_PLAYBACK_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1STOP_1FORCEINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  FMOD_STUDIO_STOP_MODE result;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_STOP_MODE)FMOD_STUDIO_STOP_FORCEINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1RECORD_1COMMANDS_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1RECORD_1COMMANDS_1FILEFLUSH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1LOAD_1BANK_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1LOAD_1BANK_1NONBLOCKING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x00000001;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1ADVANCEDSETTINGS_1cbSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->cbSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1ADVANCEDSETTINGS_1cbSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  result = (int) ((arg1)->cbSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1ADVANCEDSETTINGS_1commandQueueSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->commandQueueSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1ADVANCEDSETTINGS_1commandQueueSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->commandQueueSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1ADVANCEDSETTINGS_1handleInitialSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->handleInitialSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1ADVANCEDSETTINGS_1handleInitialSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  result = (unsigned int) ((arg1)->handleInitialSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1ADVANCEDSETTINGS_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  FMOD_STUDIO_ADVANCEDSETTINGS_init(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1ADVANCEDSETTINGS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_ADVANCEDSETTINGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_ADVANCEDSETTINGS *)new FMOD_STUDIO_ADVANCEDSETTINGS();
  *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1ADVANCEDSETTINGS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_ADVANCEDSETTINGS *arg1 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1dspUsage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dspUsage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1dspUsage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  result = (float) ((arg1)->dspUsage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1streamUsage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->streamUsage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1streamUsage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  result = (float) ((arg1)->streamUsage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1geometryUsage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->geometryUsage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1geometryUsage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  result = (float) ((arg1)->geometryUsage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1updateUsage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->updateUsage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1updateUsage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  result = (float) ((arg1)->updateUsage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1studioUsage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->studioUsage = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1CPU_1USAGE_1studioUsage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  result = (float) ((arg1)->studioUsage);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1CPU_1USAGE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_CPU_USAGE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_CPU_USAGE *)new FMOD_STUDIO_CPU_USAGE();
  *(FMOD_STUDIO_CPU_USAGE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1CPU_1USAGE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_CPU_USAGE *arg1 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_CPU_USAGE **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1currentUsage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->currentUsage = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1currentUsage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  result = (int) ((arg1)->currentUsage);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1peakUsage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->peakUsage = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1peakUsage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  result = (int) ((arg1)->peakUsage);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  result = (int) ((arg1)->capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1stallCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stallCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1stallCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  result = (int) ((arg1)->stallCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1stallTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->stallTime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1INFO_1stallTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  result = (float) ((arg1)->stallTime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1BUFFER_1INFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BUFFER_INFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_BUFFER_INFO *)new FMOD_STUDIO_BUFFER_INFO();
  *(FMOD_STUDIO_BUFFER_INFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1BUFFER_1INFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_BUFFER_INFO *arg1 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1USAGE_1studioCommandQueue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMOD_STUDIO_BUFFER_USAGE *arg1 = (FMOD_STUDIO_BUFFER_USAGE *) 0 ;
  FMOD_STUDIO_BUFFER_INFO *arg2 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD_STUDIO_BUFFER_USAGE **)&jarg1; 
  arg2 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg2; 
  if (arg1) (arg1)->studioCommandQueue = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1USAGE_1studioCommandQueue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BUFFER_USAGE *arg1 = (FMOD_STUDIO_BUFFER_USAGE *) 0 ;
  FMOD_STUDIO_BUFFER_INFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_USAGE **)&jarg1; 
  result = (FMOD_STUDIO_BUFFER_INFO *)& ((arg1)->studioCommandQueue);
  *(FMOD_STUDIO_BUFFER_INFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1USAGE_1studioHandle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMOD_STUDIO_BUFFER_USAGE *arg1 = (FMOD_STUDIO_BUFFER_USAGE *) 0 ;
  FMOD_STUDIO_BUFFER_INFO *arg2 = (FMOD_STUDIO_BUFFER_INFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD_STUDIO_BUFFER_USAGE **)&jarg1; 
  arg2 = *(FMOD_STUDIO_BUFFER_INFO **)&jarg2; 
  if (arg1) (arg1)->studioHandle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1BUFFER_1USAGE_1studioHandle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BUFFER_USAGE *arg1 = (FMOD_STUDIO_BUFFER_USAGE *) 0 ;
  FMOD_STUDIO_BUFFER_INFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_BUFFER_USAGE **)&jarg1; 
  result = (FMOD_STUDIO_BUFFER_INFO *)& ((arg1)->studioHandle);
  *(FMOD_STUDIO_BUFFER_INFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1BUFFER_1USAGE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_BUFFER_USAGE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_BUFFER_USAGE *)new FMOD_STUDIO_BUFFER_USAGE();
  *(FMOD_STUDIO_BUFFER_USAGE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1BUFFER_1USAGE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_BUFFER_USAGE *arg1 = (FMOD_STUDIO_BUFFER_USAGE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_BUFFER_USAGE **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1name_1or_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->name_or_data = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name_or_data, (const char *)arg2);
    } else {
      arg1->name_or_data = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1name_1or_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  result = (char *) ((arg1)->name_or_data);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  FMOD_MODE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  arg2 = (FMOD_MODE)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  FMOD_MODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  result = (FMOD_MODE) ((arg1)->mode);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1exinfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  FMOD_CREATESOUNDEXINFO *arg2 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  arg2 = *(FMOD_CREATESOUNDEXINFO **)&jarg2; 
  if (arg1) (arg1)->exinfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1exinfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  FMOD_CREATESOUNDEXINFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  result = (FMOD_CREATESOUNDEXINFO *)& ((arg1)->exinfo);
  *(FMOD_CREATESOUNDEXINFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1subsoundIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->subsoundIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1STUDIO_1SOUND_1INFO_1subsoundIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  result = (int) ((arg1)->subsoundIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_new_1FMOD_1STUDIO_1SOUND_1INFO(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FMOD_STUDIO_SOUND_INFO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FMOD_STUDIO_SOUND_INFO *)new FMOD_STUDIO_SOUND_INFO();
  *(FMOD_STUDIO_SOUND_INFO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1STUDIO_1SOUND_1INFO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD_STUDIO_SOUND_INFO *arg1 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD_STUDIO_SOUND_INFO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Memory_1Initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  FMOD_MEMORY_ALLOC_CALLBACK arg3 = (FMOD_MEMORY_ALLOC_CALLBACK) 0 ;
  FMOD_MEMORY_REALLOC_CALLBACK arg4 = (FMOD_MEMORY_REALLOC_CALLBACK) 0 ;
  FMOD_MEMORY_FREE_CALLBACK arg5 = (FMOD_MEMORY_FREE_CALLBACK) 0 ;
  FMOD_MEMORY_TYPE arg6 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_MEMORY_ALLOC_CALLBACK *)&jarg3; 
  arg4 = *(FMOD_MEMORY_REALLOC_CALLBACK *)&jarg4; 
  arg5 = *(FMOD_MEMORY_FREE_CALLBACK *)&jarg5; 
  arg6 = (FMOD_MEMORY_TYPE)jarg6; 
  result = (FMOD_RESULT)FMOD::Memory_Initialize(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Memory_1Initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  FMOD_MEMORY_ALLOC_CALLBACK arg3 = (FMOD_MEMORY_ALLOC_CALLBACK) 0 ;
  FMOD_MEMORY_REALLOC_CALLBACK arg4 = (FMOD_MEMORY_REALLOC_CALLBACK) 0 ;
  FMOD_MEMORY_FREE_CALLBACK arg5 = (FMOD_MEMORY_FREE_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_MEMORY_ALLOC_CALLBACK *)&jarg3; 
  arg4 = *(FMOD_MEMORY_REALLOC_CALLBACK *)&jarg4; 
  arg5 = *(FMOD_MEMORY_FREE_CALLBACK *)&jarg5; 
  result = (FMOD_RESULT)FMOD::Memory_Initialize(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Memory_1GetStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  bool arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (FMOD_RESULT)FMOD::Memory_GetStats(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Memory_1GetStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)FMOD::Memory_GetStats(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Debug_1Initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  FMOD_DEBUG_FLAGS arg1 ;
  FMOD_DEBUG_MODE arg2 ;
  FMOD_DEBUG_CALLBACK arg3 = (FMOD_DEBUG_CALLBACK) 0 ;
  char *arg4 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FMOD_DEBUG_FLAGS)jarg1; 
  arg2 = (FMOD_DEBUG_MODE)jarg2; 
  arg3 = *(FMOD_DEBUG_CALLBACK *)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (FMOD_RESULT)FMOD::Debug_Initialize(arg1,arg2,arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Debug_1Initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD_DEBUG_FLAGS arg1 ;
  FMOD_DEBUG_MODE arg2 ;
  FMOD_DEBUG_CALLBACK arg3 = (FMOD_DEBUG_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FMOD_DEBUG_FLAGS)jarg1; 
  arg2 = (FMOD_DEBUG_MODE)jarg2; 
  arg3 = *(FMOD_DEBUG_CALLBACK *)&jarg3; 
  result = (FMOD_RESULT)FMOD::Debug_Initialize(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Debug_1Initialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  FMOD_DEBUG_FLAGS arg1 ;
  FMOD_DEBUG_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FMOD_DEBUG_FLAGS)jarg1; 
  arg2 = (FMOD_DEBUG_MODE)jarg2; 
  result = (FMOD_RESULT)FMOD::Debug_Initialize(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Debug_1Initialize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FMOD_DEBUG_FLAGS arg1 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FMOD_DEBUG_FLAGS)jarg1; 
  result = (FMOD_RESULT)FMOD::Debug_Initialize(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_File_1SetDiskBusy(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (FMOD_RESULT)FMOD::File_SetDiskBusy(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_File_1GetDiskBusy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (FMOD_RESULT)FMOD::File_GetDiskBusy(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1Create(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  FMOD::System **arg1 = (FMOD::System **) 0 ;
  FMOD::System *ppSystem1 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &ppSystem1;
  
  result = (FMOD_RESULT)FMOD::System_Create(arg1);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/FMOD_System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::System **)&cPtr = *arg1;
    (jenv)->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_OUTPUTTYPE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (FMOD_OUTPUTTYPE)jarg2; 
  result = (FMOD_RESULT)(arg1)->setOutput(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_OUTPUTTYPE *arg2 = (FMOD_OUTPUTTYPE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_OUTPUTTYPE **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getOutput(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getNumDrivers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumDrivers(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getDriverInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  FMOD_GUID *arg5 = (FMOD_GUID *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg7 = (FMOD_SPEAKERMODE *) 0 ;
  int *arg8 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(FMOD_GUID **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(FMOD_SPEAKERMODE **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (FMOD_RESULT)(arg1)->getDriverInfo(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setDriver(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getDriver(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setSoftwareChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setSoftwareChannels(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getSoftwareChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getSoftwareChannels(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setSoftwareFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_SPEAKERMODE arg3 ;
  int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FMOD_SPEAKERMODE)jarg3; 
  arg4 = (int)jarg4; 
  result = (FMOD_RESULT)(arg1)->setSoftwareFormat(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getSoftwareFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg3 = (FMOD_SPEAKERMODE *) 0 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(FMOD_SPEAKERMODE **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getSoftwareFormat(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setDSPBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->setDSPBufferSize(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getDSPBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getDSPBufferSize(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jint jarg8) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_FILE_OPEN_CALLBACK arg2 = (FMOD_FILE_OPEN_CALLBACK) 0 ;
  FMOD_FILE_CLOSE_CALLBACK arg3 = (FMOD_FILE_CLOSE_CALLBACK) 0 ;
  FMOD_FILE_READ_CALLBACK arg4 = (FMOD_FILE_READ_CALLBACK) 0 ;
  FMOD_FILE_SEEK_CALLBACK arg5 = (FMOD_FILE_SEEK_CALLBACK) 0 ;
  FMOD_FILE_ASYNCREAD_CALLBACK arg6 = (FMOD_FILE_ASYNCREAD_CALLBACK) 0 ;
  FMOD_FILE_ASYNCCANCEL_CALLBACK arg7 = (FMOD_FILE_ASYNCCANCEL_CALLBACK) 0 ;
  int arg8 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_FILE_OPEN_CALLBACK *)&jarg2; 
  arg3 = *(FMOD_FILE_CLOSE_CALLBACK *)&jarg3; 
  arg4 = *(FMOD_FILE_READ_CALLBACK *)&jarg4; 
  arg5 = *(FMOD_FILE_SEEK_CALLBACK *)&jarg5; 
  arg6 = *(FMOD_FILE_ASYNCREAD_CALLBACK *)&jarg6; 
  arg7 = *(FMOD_FILE_ASYNCCANCEL_CALLBACK *)&jarg7; 
  arg8 = (int)jarg8; 
  result = (FMOD_RESULT)(arg1)->setFileSystem(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1attachFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_FILE_OPEN_CALLBACK arg2 = (FMOD_FILE_OPEN_CALLBACK) 0 ;
  FMOD_FILE_CLOSE_CALLBACK arg3 = (FMOD_FILE_CLOSE_CALLBACK) 0 ;
  FMOD_FILE_READ_CALLBACK arg4 = (FMOD_FILE_READ_CALLBACK) 0 ;
  FMOD_FILE_SEEK_CALLBACK arg5 = (FMOD_FILE_SEEK_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_FILE_OPEN_CALLBACK *)&jarg2; 
  arg3 = *(FMOD_FILE_CLOSE_CALLBACK *)&jarg3; 
  arg4 = *(FMOD_FILE_READ_CALLBACK *)&jarg4; 
  arg5 = *(FMOD_FILE_SEEK_CALLBACK *)&jarg5; 
  result = (FMOD_RESULT)(arg1)->attachFileSystem(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setAdvancedSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_ADVANCEDSETTINGS *arg2 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_ADVANCEDSETTINGS **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setAdvancedSettings(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getAdvancedSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_ADVANCEDSETTINGS *arg2 = (FMOD_ADVANCEDSETTINGS *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_ADVANCEDSETTINGS **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getAdvancedSettings(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_SYSTEM_CALLBACK arg2 = (FMOD_SYSTEM_CALLBACK) 0 ;
  FMOD_SYSTEM_CALLBACK_TYPE arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_SYSTEM_CALLBACK *)&jarg2; 
  arg3 = (FMOD_SYSTEM_CALLBACK_TYPE)jarg3; 
  result = (FMOD_RESULT)(arg1)->setCallback(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_SYSTEM_CALLBACK arg2 = (FMOD_SYSTEM_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_SYSTEM_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setPluginPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FMOD_RESULT)(arg1)->setPluginPath((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1loadPlugin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (FMOD_RESULT)(arg1)->loadPlugin((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1loadPlugin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->loadPlugin((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1unloadPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FMOD_RESULT)(arg1)->unloadPlugin(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getNumPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_PLUGINTYPE arg2 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (FMOD_PLUGINTYPE)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getNumPlugins(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getPluginHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_PLUGINTYPE arg2 ;
  int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (FMOD_PLUGINTYPE)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getPluginHandle(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getPluginInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int arg2 ;
  FMOD_PLUGINTYPE *arg3 = (FMOD_PLUGINTYPE *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(FMOD_PLUGINTYPE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  arg6 = *(unsigned int **)&jarg6; 
  result = (FMOD_RESULT)(arg1)->getPluginInfo(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setOutputByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setOutputByPlugin(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getOutputByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getOutputByPlugin(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createDSPByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int arg2 ;
  FMOD::DSP **arg3 = (FMOD::DSP **) 0 ;
  FMOD::DSP *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->createDSPByPlugin(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getDSPInfoByPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int arg2 ;
  FMOD_DSP_DESCRIPTION **arg3 = (FMOD_DSP_DESCRIPTION **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(FMOD_DSP_DESCRIPTION ***)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getDSPInfoByPlugin(arg2,(FMOD_DSP_DESCRIPTION const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1registerCodec_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_CODEC_DESCRIPTION *arg2 = (FMOD_CODEC_DESCRIPTION *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_CODEC_DESCRIPTION **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (FMOD_RESULT)(arg1)->registerCodec(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1registerCodec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_CODEC_DESCRIPTION *arg2 = (FMOD_CODEC_DESCRIPTION *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_CODEC_DESCRIPTION **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->registerCodec(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1registerDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_DSP_DESCRIPTION *arg2 = (FMOD_DSP_DESCRIPTION *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_DSP_DESCRIPTION **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->registerDSP((FMOD_DSP_DESCRIPTION const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1registerOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_OUTPUT_DESCRIPTION *arg2 = (FMOD_OUTPUT_DESCRIPTION *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_OUTPUT_DESCRIPTION **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->registerOutput((FMOD_OUTPUT_DESCRIPTION const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_INITFLAGS arg3 ;
  void *arg4 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FMOD_INITFLAGS)jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->init(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->close();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->update();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setSpeakerPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_SPEAKER arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (FMOD_SPEAKER)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setSpeakerPosition(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getSpeakerPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_SPEAKER arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  bool *arg5 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (FMOD_SPEAKER)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  result = (FMOD_RESULT)(arg1)->getSpeakerPosition(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setStreamBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)(arg1)->setStreamBufferSize(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getStreamBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT *arg3 = (FMOD_TIMEUNIT *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = *(FMOD_TIMEUNIT **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getStreamBufferSize(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1set3DSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)(arg1)->set3DSettings(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1get3DSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->get3DSettings(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1set3DNumListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->set3DNumListeners(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1get3DNumListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->get3DNumListeners(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1set3DListenerAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg5 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg6 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  arg5 = *(FMOD_VECTOR **)&jarg5; 
  arg6 = *(FMOD_VECTOR **)&jarg6; 
  result = (FMOD_RESULT)(arg1)->set3DListenerAttributes(arg2,(FMOD_VECTOR const *)arg3,(FMOD_VECTOR const *)arg4,(FMOD_VECTOR const *)arg5,(FMOD_VECTOR const *)arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1get3DListenerAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg5 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg6 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  arg5 = *(FMOD_VECTOR **)&jarg5; 
  arg6 = *(FMOD_VECTOR **)&jarg6; 
  result = (FMOD_RESULT)(arg1)->get3DListenerAttributes(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1set3DRolloffCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_3D_ROLLOFF_CALLBACK arg2 = (FMOD_3D_ROLLOFF_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_3D_ROLLOFF_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)(arg1)->set3DRolloffCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1mixerSuspend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->mixerSuspend();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1mixerResume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->mixerResume();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getVersion(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getOutputHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getOutputHandle(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getChannelsPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getChannelsPlaying(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getCPUUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  arg6 = *(float **)&jarg6; 
  result = (FMOD_RESULT)(arg1)->getCPUUsage(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getSoundRAM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getSoundRAM(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jobject jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_MODE arg3 ;
  FMOD_CREATESOUNDEXINFO *arg4 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD::Sound **arg5 = (FMOD::Sound **) 0 ;
  FMOD::Sound *ppSystem5 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (FMOD_MODE)jarg3; 
  arg4 = *(FMOD_CREATESOUNDEXINFO **)&jarg4; 
  
  arg5 = &ppSystem5;
  
  result = (FMOD_RESULT)(arg1)->createSound((char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Sound");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Sound **)&cPtr = *arg5;
    (jenv)->SetLongField(jarg5, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jobject jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_MODE arg3 ;
  FMOD_CREATESOUNDEXINFO *arg4 = (FMOD_CREATESOUNDEXINFO *) 0 ;
  FMOD::Sound **arg5 = (FMOD::Sound **) 0 ;
  FMOD::Sound *ppSystem5 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (FMOD_MODE)jarg3; 
  arg4 = *(FMOD_CREATESOUNDEXINFO **)&jarg4; 
  
  arg5 = &ppSystem5;
  
  result = (FMOD_RESULT)(arg1)->createStream((char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Sound");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Sound **)&cPtr = *arg5;
    (jenv)->SetLongField(jarg5, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_DSP_DESCRIPTION *arg2 = (FMOD_DSP_DESCRIPTION *) 0 ;
  FMOD::DSP **arg3 = (FMOD::DSP **) 0 ;
  FMOD::DSP *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_DSP_DESCRIPTION **)&jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->createDSP((FMOD_DSP_DESCRIPTION const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createDSPByType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_DSP_TYPE arg2 ;
  FMOD::DSP **arg3 = (FMOD::DSP **) 0 ;
  FMOD_DSP_TYPE *argp2 ;
  FMOD::DSP *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  argp2 = *(FMOD_DSP_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FMOD_DSP_TYPE");
    return 0;
  }
  arg2 = *argp2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->createDSPByType(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::ChannelGroup **arg3 = (FMOD::ChannelGroup **) 0 ;
  FMOD::ChannelGroup *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->createChannelGroup((char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ChannelGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::ChannelGroup **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::SoundGroup **arg3 = (FMOD::SoundGroup **) 0 ;
  FMOD::SoundGroup *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->createSoundGroup((char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/SoundGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::SoundGroup **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createReverb3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD::Reverb3D **arg2 = (FMOD::Reverb3D **) 0 ;
  FMOD::Reverb3D *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->createReverb3D(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Reverb3D");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Reverb3D **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1playSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jobject jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD::Sound *arg2 = (FMOD::Sound *) 0 ;
  FMOD::ChannelGroup *arg3 = (FMOD::ChannelGroup *) 0 ;
  bool arg4 ;
  FMOD::Channel **arg5 = (FMOD::Channel **) 0 ;
  FMOD::Channel *ppSystem5 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD::Sound **)&jarg2; 
  arg3 = *(FMOD::ChannelGroup **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  
  arg5 = &ppSystem5;
  
  result = (FMOD_RESULT)(arg1)->playSound(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Channel");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Channel **)&cPtr = *arg5;
    (jenv)->SetLongField(jarg5, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1playDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jobject jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD::ChannelGroup *arg3 = (FMOD::ChannelGroup *) 0 ;
  bool arg4 ;
  FMOD::Channel **arg5 = (FMOD::Channel **) 0 ;
  FMOD::Channel *ppSystem5 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  arg3 = *(FMOD::ChannelGroup **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  
  arg5 = &ppSystem5;
  
  result = (FMOD_RESULT)(arg1)->playDSP(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Channel");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Channel **)&cPtr = *arg5;
    (jenv)->SetLongField(jarg5, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD::Channel **arg3 = (FMOD::Channel **) 0 ;
  FMOD::Channel *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->getChannel(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Channel");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Channel **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getMasterChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD::ChannelGroup **arg2 = (FMOD::ChannelGroup **) 0 ;
  FMOD::ChannelGroup *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getMasterChannelGroup(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ChannelGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::ChannelGroup **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getMasterSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD::SoundGroup **arg2 = (FMOD::SoundGroup **) 0 ;
  FMOD::SoundGroup *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getMasterSoundGroup(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/SoundGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::SoundGroup **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1attachChannelGroupToPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_PORT_TYPE arg2 ;
  FMOD_PORT_INDEX arg3 ;
  FMOD::ChannelGroup *arg4 = (FMOD::ChannelGroup *) 0 ;
  bool arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (FMOD_PORT_TYPE)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (FMOD_PORT_INDEX)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(FMOD::ChannelGroup **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (FMOD_RESULT)(arg1)->attachChannelGroupToPort(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1attachChannelGroupToPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_PORT_TYPE arg2 ;
  FMOD_PORT_INDEX arg3 ;
  FMOD::ChannelGroup *arg4 = (FMOD::ChannelGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (FMOD_PORT_TYPE)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (FMOD_PORT_INDEX)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(FMOD::ChannelGroup **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->attachChannelGroupToPort(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1detachChannelGroupFromPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD::ChannelGroup *arg2 = (FMOD::ChannelGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD::ChannelGroup **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->detachChannelGroupFromPort(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_REVERB_PROPERTIES *arg3 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_REVERB_PROPERTIES **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->setReverbProperties(arg2,(FMOD_REVERB_PROPERTIES const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_REVERB_PROPERTIES *arg3 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_REVERB_PROPERTIES **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getReverbProperties(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1lockDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->lockDSP();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1unlockDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->unlockDSP();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getRecordNumDrivers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getRecordNumDrivers(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getRecordDriverInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  FMOD_GUID *arg5 = (FMOD_GUID *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg7 = (FMOD_SPEAKERMODE *) 0 ;
  int *arg8 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(FMOD_GUID **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(FMOD_SPEAKERMODE **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (FMOD_RESULT)(arg1)->getRecordDriverInfo(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getRecordPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getRecordPosition(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1recordStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD::Sound *arg3 = (FMOD::Sound *) 0 ;
  bool arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD::Sound **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (FMOD_RESULT)(arg1)->recordStart(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1recordStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->recordStop(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1isRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->isRecording(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1createGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD::Geometry **arg4 = (FMOD::Geometry **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD::Geometry ***)&jarg4; 
  result = (FMOD_RESULT)(arg1)->createGeometry(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setGeometrySettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setGeometrySettings(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getGeometrySettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getGeometrySettings(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1loadGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  FMOD::Geometry **arg4 = (FMOD::Geometry **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD::Geometry ***)&jarg4; 
  result = (FMOD_RESULT)(arg1)->loadGeometry((void const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getGeometryOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(float **)&jarg5; 
  result = (FMOD_RESULT)(arg1)->getGeometryOcclusion((FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setNetworkProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FMOD_RESULT)(arg1)->setNetworkProxy((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getNetworkProxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->getNetworkProxy(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setNetworkTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setNetworkTimeout(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getNetworkTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNetworkTimeout(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_FMOD_1System_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::System **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1FMOD_1System(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::System *arg1 = (FMOD::System *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::System **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD::System **arg2 = (FMOD::System **) 0 ;
  FMOD::System *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getSystemObject(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/FMOD_System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::System **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void **arg4 = (void **) 0 ;
  void **arg5 = (void **) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  unsigned int *arg7 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(void ***)&jarg4; 
  arg5 = *(void ***)&jarg5; 
  arg6 = *(unsigned int **)&jarg6; 
  arg7 = *(unsigned int **)&jarg7; 
  result = (FMOD_RESULT)(arg1)->lock(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (FMOD_RESULT)(arg1)->unlock(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float arg2 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->setDefaults(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getDefaults(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1set3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->set3DMinMaxDistance(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1get3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->get3DMinMaxDistance(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1set3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)(arg1)->set3DConeSettings(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1get3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->get3DConeSettings(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1set3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->set3DCustomRolloff(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1get3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_VECTOR **arg2 = (FMOD_VECTOR **) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD_VECTOR ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->get3DCustomRolloff(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setSubSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int arg2 ;
  FMOD::Sound *arg3 = (FMOD::Sound *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD::Sound **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->setSubSound(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getSubSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int arg2 ;
  FMOD::Sound **arg3 = (FMOD::Sound **) 0 ;
  FMOD::Sound *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->getSubSound(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Sound");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Sound **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getSubSoundParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD::Sound **arg2 = (FMOD::Sound **) 0 ;
  FMOD::Sound *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getSubSoundParent(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Sound");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Sound **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->getName(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)(arg1)->getLength(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_SOUND_TYPE *arg2 = (FMOD_SOUND_TYPE *) 0 ;
  FMOD_SOUND_FORMAT *arg3 = (FMOD_SOUND_FORMAT *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD_SOUND_TYPE **)&jarg2; 
  arg3 = *(FMOD_SOUND_FORMAT **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  result = (FMOD_RESULT)(arg1)->getFormat(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getNumSubSounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumSubSounds(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getNumTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getNumTags(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_TAG *arg4 = (FMOD_TAG *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_TAG **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getTag((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getOpenState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_OPENSTATE *arg2 = (FMOD_OPENSTATE *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD_OPENSTATE **)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  result = (FMOD_RESULT)(arg1)->getOpenState(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1readData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->readData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1seekData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  unsigned int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FMOD_RESULT)(arg1)->seekData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD::SoundGroup *arg2 = (FMOD::SoundGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD::SoundGroup **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setSoundGroup(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getSoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD::SoundGroup **arg2 = (FMOD::SoundGroup **) 0 ;
  FMOD::SoundGroup *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getSoundGroup(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/SoundGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::SoundGroup **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getNumSyncPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumSyncPoints(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getSyncPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int arg2 ;
  FMOD_SYNCPOINT **arg3 = (FMOD_SYNCPOINT **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_SYNCPOINT ***)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getSyncPoint(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getSyncPointInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_SYNCPOINT *arg2 = (FMOD_SYNCPOINT *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg6 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD_SYNCPOINT **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(unsigned int **)&jarg5; 
  arg6 = (FMOD_TIMEUNIT)jarg6; 
  result = (FMOD_RESULT)(arg1)->getSyncPointInfo(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1addSyncPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  char *arg4 = (char *) 0 ;
  FMOD_SYNCPOINT **arg5 = (FMOD_SYNCPOINT **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(FMOD_SYNCPOINT ***)&jarg5; 
  result = (FMOD_RESULT)(arg1)->addSyncPoint(arg2,arg3,(char const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1deleteSyncPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_SYNCPOINT *arg2 = (FMOD_SYNCPOINT *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD_SYNCPOINT **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->deleteSyncPoint(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (FMOD_MODE)jarg2; 
  result = (FMOD_RESULT)(arg1)->setMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  FMOD_MODE *arg2 = (FMOD_MODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(FMOD_MODE **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setLoopCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getLoopCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int arg4 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)(arg1)->setLoopPoints(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)(arg1)->getLoopPoints(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getMusicNumChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMusicNumChannels(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setMusicChannelVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->setMusicChannelVolume(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getMusicChannelVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getMusicChannelVolume(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setMusicSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setMusicSpeed(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getMusicSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMusicSpeed(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Sound_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Sound **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1Sound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Sound *arg1 = (FMOD::Sound *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Sound **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD::System **arg2 = (FMOD::System **) 0 ;
  FMOD::System *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getSystemObject(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/FMOD_System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::System **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setPaused(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getPaused(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setVolume(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getVolume(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setVolumeRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setVolumeRamp(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getVolumeRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getVolumeRamp(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getAudibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getAudibility(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setPitch(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getPitch(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setMute(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMute(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->setReverbProperties(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getReverbProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getReverbProperties(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setLowPassGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setLowPassGain(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getLowPassGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getLowPassGain(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (FMOD_MODE)jarg2; 
  result = (FMOD_RESULT)(arg1)->setMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_MODE *arg2 = (FMOD_MODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_MODE **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_CHANNELCONTROL_CALLBACK arg2 = (FMOD_CHANNELCONTROL_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_CHANNELCONTROL_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1isPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->isPlaying(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setPan(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setMixLevelsOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (FMOD_RESULT)(arg1)->setMixLevelsOutput(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setMixLevelsInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->setMixLevelsInput(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setMixMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)(arg1)->setMixMatrix(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setMixMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (FMOD_RESULT)(arg1)->setMixMatrix(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getMixMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)(arg1)->getMixMatrix(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getMixMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getMixMatrix(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getDSPClock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(unsigned long long **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getDSPClock(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setDelay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  bool arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = jarg4 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setDelay(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setDelay_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (FMOD_RESULT)(arg1)->setDelay(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getDelay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  bool *arg4 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(unsigned long long **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getDelay(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getDelay_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(unsigned long long **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getDelay(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1addFadePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->addFadePoint(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setFadePointRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->setFadePointRamp(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1removeFadePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (FMOD_RESULT)(arg1)->removeFadePoints(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getFadePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = *(unsigned long long **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getFadePoints(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  int arg2 ;
  FMOD::DSP **arg3 = (FMOD::DSP **) 0 ;
  FMOD::DSP *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->getDSP(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1addDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  int arg2 ;
  FMOD::DSP *arg3 = (FMOD::DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD::DSP **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->addDSP(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1removeDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->removeDSP(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getNumDSPs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumDSPs(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setDSPIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->setDSPIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getDSPIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getDSPIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1overridePanDSP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->overridePanDSP(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->set3DAttributes((FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3,(FMOD_VECTOR const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->set3DAttributes((FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->get3DAttributes(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->get3DAttributes(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->set3DMinMaxDistance(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DMinMaxDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->get3DMinMaxDistance(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)(arg1)->set3DConeSettings(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DConeSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->get3DConeSettings(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DConeOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->set3DConeOrientation(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DConeOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->get3DConeOrientation(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->set3DCustomRolloff(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DCustomRolloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  FMOD_VECTOR **arg2 = (FMOD_VECTOR **) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(FMOD_VECTOR ***)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->get3DCustomRolloff(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->set3DOcclusion(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DOcclusion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->get3DOcclusion(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DSpread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->set3DSpread(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DSpread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->get3DSpread(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->set3DLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->get3DLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DDopplerLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->set3DDopplerLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DDopplerLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->get3DDopplerLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1set3DDistanceFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)(arg1)->set3DDistanceFilter(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1get3DDistanceFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->get3DDistanceFilter(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelControl_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1ChannelControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::ChannelControl *arg1 = (FMOD::ChannelControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::ChannelControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1setFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setFrequency(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getFrequency(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1setPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setPriority(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getPriority(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)(arg1)->setPosition(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  result = (FMOD_RESULT)(arg1)->getPosition(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1setChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  FMOD::ChannelGroup *arg2 = (FMOD::ChannelGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(FMOD::ChannelGroup **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setChannelGroup(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  FMOD::ChannelGroup **arg2 = (FMOD::ChannelGroup **) 0 ;
  FMOD::ChannelGroup *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getChannelGroup(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ChannelGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::ChannelGroup **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1setLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setLoopCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getLoopCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getLoopCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1setLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  unsigned int arg2 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int arg4 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)(arg1)->setLoopPoints(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getLoopPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  FMOD_TIMEUNIT arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  arg3 = (FMOD_TIMEUNIT)jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  arg5 = (FMOD_TIMEUNIT)jarg5; 
  result = (FMOD_RESULT)(arg1)->getLoopPoints(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1isVirtual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->isVirtual(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getCurrentSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  FMOD::Sound **arg2 = (FMOD::Sound **) 0 ;
  FMOD::Sound *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getCurrentSound(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Sound");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Sound **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Channel_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Channel **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1Channel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Channel *arg1 = (FMOD::Channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Channel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1addGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  FMOD::ChannelGroup *arg2 = (FMOD::ChannelGroup *) 0 ;
  bool arg3 ;
  FMOD::DSPConnection **arg4 = (FMOD::DSPConnection **) 0 ;
  FMOD::DSPConnection *ppSystem4 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = *(FMOD::ChannelGroup **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  
  arg4 = &ppSystem4;
  
  result = (FMOD_RESULT)(arg1)->addGroup(arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSPConnection");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSPConnection **)&cPtr = *arg4;
    (jenv)->SetLongField(jarg4, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1addGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  FMOD::ChannelGroup *arg2 = (FMOD::ChannelGroup *) 0 ;
  bool arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = *(FMOD::ChannelGroup **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (FMOD_RESULT)(arg1)->addGroup(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1addGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  FMOD::ChannelGroup *arg2 = (FMOD::ChannelGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = *(FMOD::ChannelGroup **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->addGroup(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumGroups(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1getGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  int arg2 ;
  FMOD::ChannelGroup **arg3 = (FMOD::ChannelGroup **) 0 ;
  FMOD::ChannelGroup *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->getGroup(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ChannelGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::ChannelGroup **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1getParentGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  FMOD::ChannelGroup **arg2 = (FMOD::ChannelGroup **) 0 ;
  FMOD::ChannelGroup *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getParentGroup(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ChannelGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::ChannelGroup **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->getName(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1getNumChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumChannels(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ChannelGroup_1getChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  int arg2 ;
  FMOD::Channel **arg3 = (FMOD::Channel **) 0 ;
  FMOD::Channel *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->getChannel(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Channel");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Channel **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1ChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::ChannelGroup *arg1 = (FMOD::ChannelGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::ChannelGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  FMOD::System **arg2 = (FMOD::System **) 0 ;
  FMOD::System *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getSystemObject(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/FMOD_System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::System **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1setMaxAudible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setMaxAudible(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getMaxAudible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMaxAudible(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1setMaxAudibleBehavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  FMOD_SOUNDGROUP_BEHAVIOR arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = (FMOD_SOUNDGROUP_BEHAVIOR)jarg2; 
  result = (FMOD_RESULT)(arg1)->setMaxAudibleBehavior(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getMaxAudibleBehavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  FMOD_SOUNDGROUP_BEHAVIOR *arg2 = (FMOD_SOUNDGROUP_BEHAVIOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(FMOD_SOUNDGROUP_BEHAVIOR **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMaxAudibleBehavior(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1setMuteFadeSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setMuteFadeSpeed(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getMuteFadeSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMuteFadeSpeed(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setVolume(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getVolume(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->getName(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getNumSounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumSounds(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  int arg2 ;
  FMOD::Sound **arg3 = (FMOD::Sound **) 0 ;
  FMOD::Sound *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->getSound(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Sound");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Sound **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getNumPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumPlaying(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_SoundGroup_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1SoundGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::SoundGroup *arg1 = (FMOD::SoundGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::SoundGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getSystemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD::System **arg2 = (FMOD::System **) 0 ;
  FMOD::System *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getSystemObject(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/FMOD_System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::System **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1addInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD::DSPConnection **arg3 = (FMOD::DSPConnection **) 0 ;
  FMOD_DSPCONNECTION_TYPE arg4 ;
  FMOD::DSPConnection *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  
  arg3 = &ppSystem3;
  
  arg4 = (FMOD_DSPCONNECTION_TYPE)jarg4; 
  result = (FMOD_RESULT)(arg1)->addInput(arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSPConnection");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSPConnection **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1addInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD::DSPConnection **arg3 = (FMOD::DSPConnection **) 0 ;
  FMOD::DSPConnection *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)(arg1)->addInput(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSPConnection");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSPConnection **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1addInput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->addInput(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1disconnectFrom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD::DSPConnection *arg3 = (FMOD::DSPConnection *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  arg3 = *(FMOD::DSPConnection **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->disconnectFrom(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1disconnectFrom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD::DSP *arg2 = (FMOD::DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD::DSP **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->disconnectFrom(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1disconnectAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool arg2 ;
  bool arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (FMOD_RESULT)(arg1)->disconnectAll(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getNumInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumInputs(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getNumOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumOutputs(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  FMOD::DSP **arg3 = (FMOD::DSP **) 0 ;
  FMOD::DSPConnection **arg4 = (FMOD::DSPConnection **) 0 ;
  FMOD::DSP *ppSystem3 = 0 ;
  FMOD::DSPConnection *ppSystem4 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  
  arg4 = &ppSystem4;
  
  result = (FMOD_RESULT)(arg1)->getInput(arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSPConnection");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSPConnection **)&cPtr = *arg4;
    (jenv)->SetLongField(jarg4, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  FMOD::DSP **arg3 = (FMOD::DSP **) 0 ;
  FMOD::DSPConnection **arg4 = (FMOD::DSPConnection **) 0 ;
  FMOD::DSP *ppSystem3 = 0 ;
  FMOD::DSPConnection *ppSystem4 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  
  arg4 = &ppSystem4;
  
  result = (FMOD_RESULT)(arg1)->getOutput(arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSPConnection");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSPConnection **)&cPtr = *arg4;
    (jenv)->SetLongField(jarg4, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setActive(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getActive(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setBypass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setBypass(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getBypass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getBypass(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setWetDryMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)(arg1)->setWetDryMix(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getWetDryMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getWetDryMix(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setChannelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD_CHANNELMASK arg2 ;
  int arg3 ;
  FMOD_SPEAKERMODE arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (FMOD_CHANNELMASK)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (FMOD_SPEAKERMODE)jarg4; 
  result = (FMOD_RESULT)(arg1)->setChannelFormat(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getChannelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD_CHANNELMASK *arg2 = (FMOD_CHANNELMASK *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg4 = (FMOD_SPEAKERMODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD_CHANNELMASK **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(FMOD_SPEAKERMODE **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getChannelFormat(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getOutputChannelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD_CHANNELMASK arg2 ;
  int arg3 ;
  FMOD_SPEAKERMODE arg4 ;
  FMOD_CHANNELMASK *arg5 = (FMOD_CHANNELMASK *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_SPEAKERMODE *arg7 = (FMOD_SPEAKERMODE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (FMOD_CHANNELMASK)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (FMOD_SPEAKERMODE)jarg4; 
  arg5 = *(FMOD_CHANNELMASK **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(FMOD_SPEAKERMODE **)&jarg7; 
  result = (FMOD_RESULT)(arg1)->getOutputChannelFormat(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->reset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setParameterFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->setParameterFloat(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setParameterInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (FMOD_RESULT)(arg1)->setParameterInt(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setParameterBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  bool arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setParameterBool(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setParameterData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (FMOD_RESULT)(arg1)->setParameterData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getParameterFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)(arg1)->getParameterFloat(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getParameterInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)(arg1)->getParameterInt(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getParameterBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(bool **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)(arg1)->getParameterBool(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getParameterData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jint jarg6) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  void **arg3 = (void **) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (int)jarg6; 
  result = (FMOD_RESULT)(arg1)->getParameterData(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumParameters(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getParameterInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  FMOD_DSP_PARAMETER_DESC **arg3 = (FMOD_DSP_PARAMETER_DESC **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_DSP_PARAMETER_DESC ***)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getParameterInfo(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getDataParameterIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getDataParameterIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1showConfigDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  void *arg2 = (void *) 0 ;
  bool arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (FMOD_RESULT)(arg1)->showConfigDialog(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  result = (FMOD_RESULT)(arg1)->getInfo(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD_DSP_TYPE *arg2 = (FMOD_DSP_TYPE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD_DSP_TYPE **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getIdle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getIdle(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1setMeteringEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool arg2 ;
  bool arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setMeteringEnabled(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getMeteringEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool *arg3 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getMeteringEnabled(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSP_1getMeteringInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  FMOD_DSP_METERING_INFO *arg2 = (FMOD_DSP_METERING_INFO *) 0 ;
  FMOD_DSP_METERING_INFO *arg3 = (FMOD_DSP_METERING_INFO *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSP **)&jarg1; 
  arg2 = *(FMOD_DSP_METERING_INFO **)&jarg2; 
  arg3 = *(FMOD_DSP_METERING_INFO **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getMeteringInfo(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1DSP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::DSP *arg1 = (FMOD::DSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::DSP **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1getInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  FMOD::DSP **arg2 = (FMOD::DSP **) 0 ;
  FMOD::DSP *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getInput(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1getOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  FMOD::DSP **arg2 = (FMOD::DSP **) 0 ;
  FMOD::DSP *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)(arg1)->getOutput(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/DSP");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::DSP **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1setMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setMix(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1getMix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getMix(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1setMixMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)(arg1)->setMixMatrix(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1setMixMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (FMOD_RESULT)(arg1)->setMixMatrix(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1getMixMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (FMOD_RESULT)(arg1)->getMixMatrix(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1getMixMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  float *arg2 = (float *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getMixMatrix(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  FMOD_DSPCONNECTION_TYPE *arg2 = (FMOD_DSPCONNECTION_TYPE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(FMOD_DSPCONNECTION_TYPE **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_DSPConnection_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1DSPConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::DSPConnection *arg1 = (FMOD::DSPConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::DSPConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1addPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jboolean jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  int arg5 ;
  FMOD_VECTOR *arg6 = (FMOD_VECTOR *) 0 ;
  int *arg7 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = *(FMOD_VECTOR **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  result = (FMOD_RESULT)(arg1)->addPolygon(arg2,arg3,arg4,arg5,(FMOD_VECTOR const *)arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getNumPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getNumPolygons(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getMaxPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getMaxPolygons(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getPolygonNumVertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getPolygonNumVertices(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1setPolygonVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->setPolygonVertex(arg2,arg3,(FMOD_VECTOR const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getPolygonVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  int arg2 ;
  int arg3 ;
  FMOD_VECTOR *arg4 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(FMOD_VECTOR **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->getPolygonVertex(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1setPolygonAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setPolygonAttributes(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getPolygonAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  bool *arg5 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  result = (FMOD_RESULT)(arg1)->getPolygonAttributes(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1setActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setActive(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getActive(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1setRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->setRotation((FMOD_VECTOR const *)arg2,(FMOD_VECTOR const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_VECTOR *arg3 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(FMOD_VECTOR **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->getRotation(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setPosition((FMOD_VECTOR const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getPosition(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1setScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setScale((FMOD_VECTOR const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getScale(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  void *arg2 = (void *) 0 ;
  int *arg3 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (FMOD_RESULT)(arg1)->save(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Geometry_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1Geometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Geometry *arg1 = (FMOD::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Geometry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1set3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  float arg3 ;
  float arg4 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (FMOD_RESULT)(arg1)->set3DAttributes((FMOD_VECTOR const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1get3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  FMOD_VECTOR *arg2 = (FMOD_VECTOR *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = *(FMOD_VECTOR **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (FMOD_RESULT)(arg1)->get3DAttributes(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1setProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  FMOD_REVERB_PROPERTIES *arg2 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = *(FMOD_REVERB_PROPERTIES **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setProperties((FMOD_REVERB_PROPERTIES const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  FMOD_REVERB_PROPERTIES *arg2 = (FMOD_REVERB_PROPERTIES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = *(FMOD_REVERB_PROPERTIES **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getProperties(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1setActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setActive(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1getActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getActive(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Reverb3D_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1Reverb3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Reverb3D *arg1 = (FMOD::Reverb3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Reverb3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_parseID(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  result = (FMOD_RESULT)FMOD::Studio::parseID((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System **arg1 = (FMOD::Studio::System **) 0 ;
  unsigned int arg2 ;
  FMOD::Studio::System *ppSystem1 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &ppSystem1;
  
  arg2 = (unsigned int)jarg2; 
  result = (FMOD_RESULT)FMOD::Studio::System::create(arg1,arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::System **)&cPtr = *arg1;
    (jenv)->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  FMOD::Studio::System **arg1 = (FMOD::Studio::System **) 0 ;
  FMOD::Studio::System *ppSystem1 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = &ppSystem1;
  
  result = (FMOD_RESULT)FMOD::Studio::System::create(arg1);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::System **)&cPtr = *arg1;
    (jenv)->SetLongField(jarg1, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1setAdvancedSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_STUDIO_ADVANCEDSETTINGS *arg2 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setAdvancedSettings(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getAdvancedSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_STUDIO_ADVANCEDSETTINGS *arg2 = (FMOD_STUDIO_ADVANCEDSETTINGS *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_STUDIO_ADVANCEDSETTINGS **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->getAdvancedSettings(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  int arg2 ;
  FMOD_STUDIO_INITFLAGS arg3 ;
  FMOD_INITFLAGS arg4 ;
  void *arg5 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FMOD_STUDIO_INITFLAGS)jarg3; 
  arg4 = (FMOD_INITFLAGS)jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (FMOD_RESULT)(arg1)->initialize(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_System_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  result = (bool)((FMOD::Studio::System const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->update();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getLowLevelSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD::System **arg2 = (FMOD::System **) 0 ;
  FMOD::System *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getLowLevelSystem(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/FMOD_System");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::System **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::Studio::EventDescription **arg3 = (FMOD::Studio::EventDescription **) 0 ;
  FMOD::Studio::EventDescription *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getEvent((char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/EventDescription");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::EventDescription **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getBus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::Studio::Bus **arg3 = (FMOD::Studio::Bus **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD::Studio::Bus ***)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getBus((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getVCA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::Studio::VCA **arg3 = (FMOD::Studio::VCA **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD::Studio::VCA ***)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getVCA((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::Studio::Bank **arg3 = (FMOD::Studio::Bank **) 0 ;
  FMOD::Studio::Bank *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getBank((char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Bank");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::Bank **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getEventByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD::Studio::EventDescription **arg3 = (FMOD::Studio::EventDescription **) 0 ;
  FMOD::Studio::EventDescription *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getEventByID((FMOD::Studio::ID const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/EventDescription");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::EventDescription **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getBusByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD::Studio::Bus **arg3 = (FMOD::Studio::Bus **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  arg3 = *(FMOD::Studio::Bus ***)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getBusByID((FMOD::Studio::ID const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getVCAByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD::Studio::VCA **arg3 = (FMOD::Studio::VCA **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  arg3 = *(FMOD::Studio::VCA ***)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getVCAByID((FMOD::Studio::ID const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getBankByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD::Studio::Bank **arg3 = (FMOD::Studio::Bank **) 0 ;
  FMOD::Studio::Bank *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getBankByID((FMOD::Studio::ID const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Bank");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::Bank **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getSoundInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_STUDIO_SOUND_INFO *arg3 = (FMOD_STUDIO_SOUND_INFO *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD_STUDIO_SOUND_INFO **)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getSoundInfo((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1lookupID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::Studio::ID *arg3 = (FMOD::Studio::ID *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD::Studio::ID **)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->lookupID((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1lookupPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = *(int **)&jarg5; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->lookupPath((FMOD::Studio::ID const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getListenerAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_3D_ATTRIBUTES *arg2 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_3D_ATTRIBUTES **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getListenerAttributes(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1setListenerAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_3D_ATTRIBUTES *arg2 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_3D_ATTRIBUTES **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setListenerAttributes((FMOD_3D_ATTRIBUTES const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1loadBankFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_STUDIO_LOAD_BANK_FLAGS arg3 ;
  FMOD::Studio::Bank **arg4 = (FMOD::Studio::Bank **) 0 ;
  FMOD::Studio::Bank *ppSystem4 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (FMOD_STUDIO_LOAD_BANK_FLAGS)jarg3; 
  
  arg4 = &ppSystem4;
  
  result = (FMOD_RESULT)(arg1)->loadBankFile((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Bank");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::Bank **)&cPtr = *arg4;
    (jenv)->SetLongField(jarg4, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1loadBankMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg6) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  FMOD_STUDIO_LOAD_MEMORY_MODE arg4 ;
  FMOD_STUDIO_LOAD_BANK_FLAGS arg5 ;
  FMOD::Studio::Bank **arg6 = (FMOD::Studio::Bank **) 0 ;
  FMOD::Studio::Bank *ppSystem6 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (FMOD_STUDIO_LOAD_MEMORY_MODE)jarg4; 
  arg5 = (FMOD_STUDIO_LOAD_BANK_FLAGS)jarg5; 
  
  arg6 = &ppSystem6;
  
  result = (FMOD_RESULT)(arg1)->loadBankMemory((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Bank");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::Bank **)&cPtr = *arg6;
    (jenv)->SetLongField(jarg6, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1loadBankCustom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_STUDIO_BANK_INFO *arg2 = (FMOD_STUDIO_BANK_INFO *) 0 ;
  FMOD_STUDIO_LOAD_BANK_FLAGS arg3 ;
  FMOD::Studio::Bank **arg4 = (FMOD::Studio::Bank **) 0 ;
  FMOD::Studio::Bank *ppSystem4 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_STUDIO_BANK_INFO **)&jarg2; 
  arg3 = (FMOD_STUDIO_LOAD_BANK_FLAGS)jarg3; 
  
  arg4 = &ppSystem4;
  
  result = (FMOD_RESULT)(arg1)->loadBankCustom((FMOD_STUDIO_BANK_INFO const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Bank");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::Bank **)&cPtr = *arg4;
    (jenv)->SetLongField(jarg4, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1unloadAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->unloadAll();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getCPUUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_STUDIO_CPU_USAGE *arg2 = (FMOD_STUDIO_CPU_USAGE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_STUDIO_CPU_USAGE **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getCPUUsage(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getBufferUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_STUDIO_BUFFER_USAGE *arg2 = (FMOD_STUDIO_BUFFER_USAGE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_STUDIO_BUFFER_USAGE **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getBufferUsage(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1resetBufferUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->resetBufferUsage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1registerPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_DSP_DESCRIPTION *arg2 = (FMOD_DSP_DESCRIPTION *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_DSP_DESCRIPTION **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->registerPlugin((FMOD_DSP_DESCRIPTION const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1unregisterPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FMOD_RESULT)(arg1)->unregisterPlugin((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getBankCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getBankCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getBankList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD::Studio::Bank **arg2 = (FMOD::Studio::Bank **) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD::Studio::Bank *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getBankList(arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/Bank");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::Bank **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1flushCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->flushCommands();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1startRecordCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_STUDIO_RECORD_COMMANDS_FLAGS arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (FMOD_STUDIO_RECORD_COMMANDS_FLAGS)jarg3; 
  result = (FMOD_RESULT)(arg1)->startRecordCommands((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1stopRecordCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->stopRecordCommands();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1playbackCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FMOD_RESULT)(arg1)->playbackCommands((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1setCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_STUDIO_SYSTEM_CALLBACK arg2 = (FMOD_STUDIO_SYSTEM_CALLBACK) 0 ;
  FMOD_STUDIO_SYSTEM_CALLBACK_TYPE arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_STUDIO_SYSTEM_CALLBACK *)&jarg2; 
  arg3 = (FMOD_STUDIO_SYSTEM_CALLBACK_TYPE)jarg3; 
  result = (FMOD_RESULT)(arg1)->setCallback(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1setCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  FMOD_STUDIO_SYSTEM_CALLBACK arg2 = (FMOD_STUDIO_SYSTEM_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(FMOD_STUDIO_SYSTEM_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::System const *)arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_System_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1System(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::System *arg1 = (FMOD::Studio::System *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::System **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_EventDescription_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  result = (bool)((FMOD::Studio::EventDescription const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getID(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getPath(arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getParameterCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getParameterCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getParameterByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  int arg2 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg3 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getParameterByIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg3 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getParameter((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getUserPropertyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getUserPropertyCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getUserPropertyByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  int arg2 ;
  FMOD_STUDIO_USER_PROPERTY *arg3 = (FMOD_STUDIO_USER_PROPERTY *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD_STUDIO_USER_PROPERTY **)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getUserPropertyByIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getUserProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD_STUDIO_USER_PROPERTY *arg3 = (FMOD_STUDIO_USER_PROPERTY *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(FMOD_STUDIO_USER_PROPERTY **)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getUserProperty((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getLength(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getMinimumDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getMinimumDistance(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getMaximumDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getMaximumDistance(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1isOneshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->isOneshot(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1isStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->isStream(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1is3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->is3D(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD::Studio::EventInstance **arg2 = (FMOD::Studio::EventInstance **) 0 ;
  FMOD::Studio::EventInstance *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->createInstance(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/EventInstance");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::EventInstance **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getInstanceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getInstanceCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getInstanceList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD::Studio::EventInstance **arg2 = (FMOD::Studio::EventInstance **) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD::Studio::EventInstance *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getInstanceList(arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/EventInstance");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::EventInstance **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1loadSampleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->loadSampleData();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1unloadSampleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->unloadSampleData();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getSampleLoadingState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD_STUDIO_LOADING_STATE *arg2 = (FMOD_STUDIO_LOADING_STATE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(FMOD_STUDIO_LOADING_STATE **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getSampleLoadingState(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1releaseAllInstances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->releaseAllInstances();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1setCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  FMOD_STUDIO_EVENT_CALLBACK arg2 = (FMOD_STUDIO_EVENT_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(FMOD_STUDIO_EVENT_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventDescription const *)arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventDescription_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1EventDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::EventDescription *arg1 = (FMOD::Studio::EventDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::EventDescription **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_EventInstance_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  result = (bool)((FMOD::Studio::EventInstance const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD::Studio::EventDescription **arg2 = (FMOD::Studio::EventDescription **) 0 ;
  FMOD::Studio::EventDescription *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getDescription(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/EventDescription");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::EventDescription **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getVolume(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setVolume(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getPitch(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setPitch(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1get3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_3D_ATTRIBUTES *arg2 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(FMOD_3D_ATTRIBUTES **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->get3DAttributes(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1set3DAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_3D_ATTRIBUTES *arg2 = (FMOD_3D_ATTRIBUTES *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(FMOD_3D_ATTRIBUTES **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->set3DAttributes((FMOD_3D_ATTRIBUTES const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_STUDIO_EVENT_PROPERTY arg2 ;
  float *arg3 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (FMOD_STUDIO_EVENT_PROPERTY)jarg2; 
  arg3 = *(float **)&jarg3; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getProperty(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_STUDIO_EVENT_PROPERTY arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (FMOD_STUDIO_EVENT_PROPERTY)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->setProperty(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getPaused(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setPaused(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->start();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_STUDIO_STOP_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (FMOD_STUDIO_STOP_MODE)jarg2; 
  result = (FMOD_RESULT)(arg1)->stop(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getTimelinePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getTimelinePosition(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setTimelinePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  int arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (FMOD_RESULT)(arg1)->setTimelinePosition(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getPlaybackState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_STUDIO_PLAYBACK_STATE *arg2 = (FMOD_STUDIO_PLAYBACK_STATE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(FMOD_STUDIO_PLAYBACK_STATE **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getPlaybackState(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD::ChannelGroup **arg2 = (FMOD::ChannelGroup **) 0 ;
  FMOD::ChannelGroup *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getChannelGroup(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ChannelGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::ChannelGroup **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->release();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1isVirtual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->isVirtual(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::Studio::ParameterInstance **arg3 = (FMOD::Studio::ParameterInstance **) 0 ;
  FMOD::Studio::ParameterInstance *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getParameter((char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ParameterInstance");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::ParameterInstance **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getParameterByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  int arg2 ;
  FMOD::Studio::ParameterInstance **arg3 = (FMOD::Studio::ParameterInstance **) 0 ;
  FMOD::Studio::ParameterInstance *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getParameterByIndex(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ParameterInstance");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::ParameterInstance **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getParameterCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getParameterCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->setParameterValue((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setParameterValueByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  int arg2 ;
  float arg3 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (FMOD_RESULT)(arg1)->setParameterValueByIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getCue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  char *arg2 = (char *) 0 ;
  FMOD::Studio::CueInstance **arg3 = (FMOD::Studio::CueInstance **) 0 ;
  FMOD::Studio::CueInstance *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getCue((char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/CueInstance");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::CueInstance **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getCueByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  int arg2 ;
  FMOD::Studio::CueInstance **arg3 = (FMOD::Studio::CueInstance **) 0 ;
  FMOD::Studio::CueInstance *ppSystem3 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = &ppSystem3;
  
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getCueByIndex(arg2,arg3);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/CueInstance");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::CueInstance **)&cPtr = *arg3;
    (jenv)->SetLongField(jarg3, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getCueCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getCueCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  FMOD_STUDIO_EVENT_CALLBACK arg2 = (FMOD_STUDIO_EVENT_CALLBACK) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(FMOD_STUDIO_EVENT_CALLBACK *)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setCallback(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1getUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  void **arg2 = (void **) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::EventInstance const *)arg1)->getUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_EventInstance_1setUserData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  void *arg2 = (void *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (FMOD_RESULT)(arg1)->setUserData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1EventInstance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::EventInstance *arg1 = (FMOD::Studio::EventInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::EventInstance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_CueInstance_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::CueInstance *arg1 = (FMOD::Studio::CueInstance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::CueInstance **)&jarg1; 
  result = (bool)((FMOD::Studio::CueInstance const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_CueInstance_1trigger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::CueInstance *arg1 = (FMOD::Studio::CueInstance *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::CueInstance **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->trigger();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1CueInstance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::CueInstance *arg1 = (FMOD::Studio::CueInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::CueInstance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_ParameterInstance_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::ParameterInstance *arg1 = (FMOD::Studio::ParameterInstance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::ParameterInstance **)&jarg1; 
  result = (bool)((FMOD::Studio::ParameterInstance const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ParameterInstance_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::ParameterInstance *arg1 = (FMOD::Studio::ParameterInstance *) 0 ;
  FMOD_STUDIO_PARAMETER_DESCRIPTION *arg2 = (FMOD_STUDIO_PARAMETER_DESCRIPTION *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::ParameterInstance **)&jarg1; 
  arg2 = *(FMOD_STUDIO_PARAMETER_DESCRIPTION **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::ParameterInstance const *)arg1)->getDescription(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ParameterInstance_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::ParameterInstance *arg1 = (FMOD::Studio::ParameterInstance *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::ParameterInstance **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::ParameterInstance const *)arg1)->getValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_ParameterInstance_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::ParameterInstance *arg1 = (FMOD::Studio::ParameterInstance *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::ParameterInstance **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1ParameterInstance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::ParameterInstance *arg1 = (FMOD::Studio::ParameterInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::ParameterInstance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_Bus_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  result = (bool)((FMOD::Studio::Bus const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bus const *)arg1)->getID(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::Bus const *)arg1)->getPath(arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1getFaderLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bus const *)arg1)->getFaderLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1setFaderLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setFaderLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1getPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bus const *)arg1)->getPaused(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1setPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setPaused(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1getMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  bool *arg2 = (bool *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bus const *)arg1)->getMute(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1setMute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  bool arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (FMOD_RESULT)(arg1)->setMute(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1stopAllEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  FMOD_STUDIO_STOP_MODE arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  arg2 = (FMOD_STUDIO_STOP_MODE)jarg2; 
  result = (FMOD_RESULT)(arg1)->stopAllEvents(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1lockChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->lockChannelGroup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1unlockChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->unlockChannelGroup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bus_1getChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  FMOD::ChannelGroup **arg2 = (FMOD::ChannelGroup **) 0 ;
  FMOD::ChannelGroup *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  result = (FMOD_RESULT)((FMOD::Studio::Bus const *)arg1)->getChannelGroup(arg2);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/ChannelGroup");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::ChannelGroup **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1Bus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::Bus *arg1 = (FMOD::Studio::Bus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::Bus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_VCA_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::VCA *arg1 = (FMOD::Studio::VCA *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::VCA **)&jarg1; 
  result = (bool)((FMOD::Studio::VCA const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_VCA_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::VCA *arg1 = (FMOD::Studio::VCA *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::VCA **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::VCA const *)arg1)->getID(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_VCA_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::VCA *arg1 = (FMOD::Studio::VCA *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::VCA **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::VCA const *)arg1)->getPath(arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_VCA_1getFaderLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::VCA *arg1 = (FMOD::Studio::VCA *) 0 ;
  float *arg2 = (float *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::VCA **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::VCA const *)arg1)->getFaderLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_VCA_1setFaderLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::VCA *arg1 = (FMOD::Studio::VCA *) 0 ;
  float arg2 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::VCA **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (FMOD_RESULT)(arg1)->setFaderLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1VCA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::VCA *arg1 = (FMOD::Studio::VCA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::VCA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_fmod_javafmodJNI_Bank_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  result = (bool)((FMOD::Studio::Bank const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD::Studio::ID *arg2 = (FMOD::Studio::ID *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(FMOD::Studio::ID **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getID(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getPath(arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1unload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->unload();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1loadSampleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->loadSampleData();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1unloadSampleData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  result = (FMOD_RESULT)(arg1)->unloadSampleData();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getLoadingState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD_STUDIO_LOADING_STATE *arg2 = (FMOD_STUDIO_LOADING_STATE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(FMOD_STUDIO_LOADING_STATE **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getLoadingState(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getSampleLoadingState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD_STUDIO_LOADING_STATE *arg2 = (FMOD_STUDIO_LOADING_STATE *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(FMOD_STUDIO_LOADING_STATE **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getSampleLoadingState(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getStringCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getStringCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getStringInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  int arg2 ;
  FMOD::Studio::ID *arg3 = (FMOD::Studio::ID *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(FMOD::Studio::ID **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getStringInfo(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getEventCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getEventCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getEventList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD::Studio::EventDescription **arg2 = (FMOD::Studio::EventDescription **) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD::Studio::EventDescription *ppSystem2 = 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  
  arg2 = &ppSystem2;
  
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getEventList(arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    // Give Java proxy the C pointer (of newly created object)
    jclass clazz = (jenv)->FindClass("com/fmod/EventDescription");
    jfieldID fid = (jenv)->GetFieldID(	clazz, "swigCPtr", "J");
    jlong cPtr = 0;
    *(FMOD::Studio::EventDescription **)&cPtr = *arg2;
    (jenv)->SetLongField(jarg2, fid, cPtr);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getBusCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getBusCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getBusList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD::Studio::Bus **arg2 = (FMOD::Studio::Bus **) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(FMOD::Studio::Bus ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getBusList(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getVCACount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  int *arg2 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getVCACount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_fmod_javafmodJNI_Bank_1getVCAList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  FMOD::Studio::VCA **arg2 = (FMOD::Studio::VCA **) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  FMOD_RESULT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  arg2 = *(FMOD::Studio::VCA ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  result = (FMOD_RESULT)((FMOD::Studio::Bank const *)arg1)->getVCAList(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_fmod_javafmodJNI_delete_1Bank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FMOD::Studio::Bank *arg1 = (FMOD::Studio::Bank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FMOD::Studio::Bank **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_fmod_javafmodJNI_FMOD_1ErrorString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  FMOD_RESULT arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FMOD_RESULT)jarg1; 
  result = (char *)FMOD_ErrorString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_SWIGChannelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FMOD::ChannelControl **)&baseptr = *(FMOD::Channel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_fmod_javafmodJNI_SWIGChannelGroupUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FMOD::ChannelControl **)&baseptr = *(FMOD::ChannelGroup **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

