/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.fmod;

public class Geometry {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Geometry(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Geometry obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        javafmodJNI.delete_Geometry(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public FMOD_RESULT release() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_release(swigCPtr, this));
  }

  public FMOD_RESULT addPolygon(float directocclusion, float reverbocclusion, boolean doublesided, int numvertices, FMOD_VECTOR vertices, SWIGTYPE_p_int polygonindex) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_addPolygon(swigCPtr, this, directocclusion, reverbocclusion, doublesided, numvertices, FMOD_VECTOR.getCPtr(vertices), vertices, SWIGTYPE_p_int.getCPtr(polygonindex)));
  }

  public FMOD_RESULT getNumPolygons(SWIGTYPE_p_int numpolygons) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getNumPolygons(swigCPtr, this, SWIGTYPE_p_int.getCPtr(numpolygons)));
  }

  public FMOD_RESULT getMaxPolygons(SWIGTYPE_p_int maxpolygons, SWIGTYPE_p_int maxvertices) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getMaxPolygons(swigCPtr, this, SWIGTYPE_p_int.getCPtr(maxpolygons), SWIGTYPE_p_int.getCPtr(maxvertices)));
  }

  public FMOD_RESULT getPolygonNumVertices(int index, SWIGTYPE_p_int numvertices) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getPolygonNumVertices(swigCPtr, this, index, SWIGTYPE_p_int.getCPtr(numvertices)));
  }

  public FMOD_RESULT setPolygonVertex(int index, int vertexindex, FMOD_VECTOR vertex) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_setPolygonVertex(swigCPtr, this, index, vertexindex, FMOD_VECTOR.getCPtr(vertex), vertex));
  }

  public FMOD_RESULT getPolygonVertex(int index, int vertexindex, FMOD_VECTOR vertex) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getPolygonVertex(swigCPtr, this, index, vertexindex, FMOD_VECTOR.getCPtr(vertex), vertex));
  }

  public FMOD_RESULT setPolygonAttributes(int index, float directocclusion, float reverbocclusion, boolean doublesided) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_setPolygonAttributes(swigCPtr, this, index, directocclusion, reverbocclusion, doublesided));
  }

  public FMOD_RESULT getPolygonAttributes(int index, SWIGTYPE_p_float directocclusion, SWIGTYPE_p_float reverbocclusion, SWIGTYPE_p_bool doublesided) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getPolygonAttributes(swigCPtr, this, index, SWIGTYPE_p_float.getCPtr(directocclusion), SWIGTYPE_p_float.getCPtr(reverbocclusion), SWIGTYPE_p_bool.getCPtr(doublesided)));
  }

  public FMOD_RESULT setActive(boolean active) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_setActive(swigCPtr, this, active));
  }

  public FMOD_RESULT getActive(SWIGTYPE_p_bool active) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getActive(swigCPtr, this, SWIGTYPE_p_bool.getCPtr(active)));
  }

  public FMOD_RESULT setRotation(FMOD_VECTOR forward, FMOD_VECTOR up) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_setRotation(swigCPtr, this, FMOD_VECTOR.getCPtr(forward), forward, FMOD_VECTOR.getCPtr(up), up));
  }

  public FMOD_RESULT getRotation(FMOD_VECTOR forward, FMOD_VECTOR up) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getRotation(swigCPtr, this, FMOD_VECTOR.getCPtr(forward), forward, FMOD_VECTOR.getCPtr(up), up));
  }

  public FMOD_RESULT setPosition(FMOD_VECTOR position) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_setPosition(swigCPtr, this, FMOD_VECTOR.getCPtr(position), position));
  }

  public FMOD_RESULT getPosition(FMOD_VECTOR position) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getPosition(swigCPtr, this, FMOD_VECTOR.getCPtr(position), position));
  }

  public FMOD_RESULT setScale(FMOD_VECTOR scale) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_setScale(swigCPtr, this, FMOD_VECTOR.getCPtr(scale), scale));
  }

  public FMOD_RESULT getScale(FMOD_VECTOR scale) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getScale(swigCPtr, this, FMOD_VECTOR.getCPtr(scale), scale));
  }

  public FMOD_RESULT save(SWIGTYPE_p_void data, SWIGTYPE_p_int datasize) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_save(swigCPtr, this, SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_int.getCPtr(datasize)));
  }

  public FMOD_RESULT setUserData(SWIGTYPE_p_void userdata) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_setUserData(swigCPtr, this, SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public FMOD_RESULT getUserData(SWIGTYPE_p_p_void userdata) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.Geometry_getUserData(swigCPtr, this, SWIGTYPE_p_p_void.getCPtr(userdata)));
  }

}
