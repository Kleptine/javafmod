/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.fmod;

public class FMOD_System {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected FMOD_System(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FMOD_System obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        javafmodJNI.delete_FMOD_System(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

	/** This constructor creates the proxy which initially does not create nor own any C memory */
	public FMOD_System() {
		this(0, false);
	}

  public FMOD_RESULT release() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_release(swigCPtr, this));
  }

  public FMOD_RESULT setOutput(FMOD_OUTPUTTYPE output) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setOutput(swigCPtr, this, output.swigValue()));
  }

  public FMOD_RESULT getOutput(SWIGTYPE_p_FMOD_OUTPUTTYPE output) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getOutput(swigCPtr, this, SWIGTYPE_p_FMOD_OUTPUTTYPE.getCPtr(output)));
  }

  public FMOD_RESULT getNumDrivers(SWIGTYPE_p_int numdrivers) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getNumDrivers(swigCPtr, this, SWIGTYPE_p_int.getCPtr(numdrivers)));
  }

  public FMOD_RESULT getDriverInfo(int id, String name, int namelen, FMOD_GUID guid, SWIGTYPE_p_int systemrate, SWIGTYPE_p_FMOD_SPEAKERMODE speakermode, SWIGTYPE_p_int speakermodechannels) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getDriverInfo(swigCPtr, this, id, name, namelen, FMOD_GUID.getCPtr(guid), guid, SWIGTYPE_p_int.getCPtr(systemrate), SWIGTYPE_p_FMOD_SPEAKERMODE.getCPtr(speakermode), SWIGTYPE_p_int.getCPtr(speakermodechannels)));
  }

  public FMOD_RESULT setDriver(int driver) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setDriver(swigCPtr, this, driver));
  }

  public FMOD_RESULT getDriver(SWIGTYPE_p_int driver) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getDriver(swigCPtr, this, SWIGTYPE_p_int.getCPtr(driver)));
  }

  public FMOD_RESULT setSoftwareChannels(int numsoftwarechannels) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setSoftwareChannels(swigCPtr, this, numsoftwarechannels));
  }

  public FMOD_RESULT getSoftwareChannels(SWIGTYPE_p_int numsoftwarechannels) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getSoftwareChannels(swigCPtr, this, SWIGTYPE_p_int.getCPtr(numsoftwarechannels)));
  }

  public FMOD_RESULT setSoftwareFormat(int samplerate, FMOD_SPEAKERMODE speakermode, int numrawspeakers) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setSoftwareFormat(swigCPtr, this, samplerate, speakermode.swigValue(), numrawspeakers));
  }

  public FMOD_RESULT getSoftwareFormat(SWIGTYPE_p_int samplerate, SWIGTYPE_p_FMOD_SPEAKERMODE speakermode, SWIGTYPE_p_int numrawspeakers) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getSoftwareFormat(swigCPtr, this, SWIGTYPE_p_int.getCPtr(samplerate), SWIGTYPE_p_FMOD_SPEAKERMODE.getCPtr(speakermode), SWIGTYPE_p_int.getCPtr(numrawspeakers)));
  }

  public FMOD_RESULT setDSPBufferSize(long bufferlength, int numbuffers) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setDSPBufferSize(swigCPtr, this, bufferlength, numbuffers));
  }

  public FMOD_RESULT getDSPBufferSize(SWIGTYPE_p_unsigned_int bufferlength, SWIGTYPE_p_int numbuffers) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getDSPBufferSize(swigCPtr, this, SWIGTYPE_p_unsigned_int.getCPtr(bufferlength), SWIGTYPE_p_int.getCPtr(numbuffers)));
  }

  public FMOD_RESULT setFileSystem(SWIGTYPE_p_f_p_q_const__char_p_unsigned_int_p_p_void_p_void__FMOD_RESULT useropen, SWIGTYPE_p_f_p_void_p_void__FMOD_RESULT userclose, SWIGTYPE_p_f_p_void_p_void_unsigned_int_p_unsigned_int_p_void__FMOD_RESULT userread, SWIGTYPE_p_f_p_void_unsigned_int_p_void__FMOD_RESULT userseek, SWIGTYPE_p_f_p_FMOD_ASYNCREADINFO_p_void__FMOD_RESULT userasyncread, SWIGTYPE_p_f_p_FMOD_ASYNCREADINFO_p_void__FMOD_RESULT userasynccancel, int blockalign) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setFileSystem(swigCPtr, this, SWIGTYPE_p_f_p_q_const__char_p_unsigned_int_p_p_void_p_void__FMOD_RESULT.getCPtr(useropen), SWIGTYPE_p_f_p_void_p_void__FMOD_RESULT.getCPtr(userclose), SWIGTYPE_p_f_p_void_p_void_unsigned_int_p_unsigned_int_p_void__FMOD_RESULT.getCPtr(userread), SWIGTYPE_p_f_p_void_unsigned_int_p_void__FMOD_RESULT.getCPtr(userseek), SWIGTYPE_p_f_p_FMOD_ASYNCREADINFO_p_void__FMOD_RESULT.getCPtr(userasyncread), SWIGTYPE_p_f_p_FMOD_ASYNCREADINFO_p_void__FMOD_RESULT.getCPtr(userasynccancel), blockalign));
  }

  public FMOD_RESULT attachFileSystem(SWIGTYPE_p_f_p_q_const__char_p_unsigned_int_p_p_void_p_void__FMOD_RESULT useropen, SWIGTYPE_p_f_p_void_p_void__FMOD_RESULT userclose, SWIGTYPE_p_f_p_void_p_void_unsigned_int_p_unsigned_int_p_void__FMOD_RESULT userread, SWIGTYPE_p_f_p_void_unsigned_int_p_void__FMOD_RESULT userseek) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_attachFileSystem(swigCPtr, this, SWIGTYPE_p_f_p_q_const__char_p_unsigned_int_p_p_void_p_void__FMOD_RESULT.getCPtr(useropen), SWIGTYPE_p_f_p_void_p_void__FMOD_RESULT.getCPtr(userclose), SWIGTYPE_p_f_p_void_p_void_unsigned_int_p_unsigned_int_p_void__FMOD_RESULT.getCPtr(userread), SWIGTYPE_p_f_p_void_unsigned_int_p_void__FMOD_RESULT.getCPtr(userseek)));
  }

  public FMOD_RESULT setAdvancedSettings(FMOD_ADVANCEDSETTINGS settings) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setAdvancedSettings(swigCPtr, this, FMOD_ADVANCEDSETTINGS.getCPtr(settings), settings));
  }

  public FMOD_RESULT getAdvancedSettings(FMOD_ADVANCEDSETTINGS settings) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getAdvancedSettings(swigCPtr, this, FMOD_ADVANCEDSETTINGS.getCPtr(settings), settings));
  }

  public FMOD_RESULT setCallback(SWIGTYPE_p_f_p_FMOD_SYSTEM_unsigned_int_p_void_p_void_p_void__FMOD_RESULT callback, long callbackmask) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setCallback__SWIG_0(swigCPtr, this, SWIGTYPE_p_f_p_FMOD_SYSTEM_unsigned_int_p_void_p_void_p_void__FMOD_RESULT.getCPtr(callback), callbackmask));
  }

  public FMOD_RESULT setCallback(SWIGTYPE_p_f_p_FMOD_SYSTEM_unsigned_int_p_void_p_void_p_void__FMOD_RESULT callback) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setCallback__SWIG_1(swigCPtr, this, SWIGTYPE_p_f_p_FMOD_SYSTEM_unsigned_int_p_void_p_void_p_void__FMOD_RESULT.getCPtr(callback)));
  }

  public FMOD_RESULT setPluginPath(String path) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setPluginPath(swigCPtr, this, path));
  }

  public FMOD_RESULT loadPlugin(String filename, SWIGTYPE_p_unsigned_int handle, long priority) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_loadPlugin__SWIG_0(swigCPtr, this, filename, SWIGTYPE_p_unsigned_int.getCPtr(handle), priority));
  }

  public FMOD_RESULT loadPlugin(String filename, SWIGTYPE_p_unsigned_int handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_loadPlugin__SWIG_1(swigCPtr, this, filename, SWIGTYPE_p_unsigned_int.getCPtr(handle)));
  }

  public FMOD_RESULT unloadPlugin(long handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_unloadPlugin(swigCPtr, this, handle));
  }

  public FMOD_RESULT getNumPlugins(FMOD_PLUGINTYPE plugintype, SWIGTYPE_p_int numplugins) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getNumPlugins(swigCPtr, this, plugintype.swigValue(), SWIGTYPE_p_int.getCPtr(numplugins)));
  }

  public FMOD_RESULT getPluginHandle(FMOD_PLUGINTYPE plugintype, int index, SWIGTYPE_p_unsigned_int handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getPluginHandle(swigCPtr, this, plugintype.swigValue(), index, SWIGTYPE_p_unsigned_int.getCPtr(handle)));
  }

  public FMOD_RESULT getPluginInfo(long handle, SWIGTYPE_p_FMOD_PLUGINTYPE plugintype, String name, int namelen, SWIGTYPE_p_unsigned_int version) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getPluginInfo(swigCPtr, this, handle, SWIGTYPE_p_FMOD_PLUGINTYPE.getCPtr(plugintype), name, namelen, SWIGTYPE_p_unsigned_int.getCPtr(version)));
  }

  public FMOD_RESULT setOutputByPlugin(long handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setOutputByPlugin(swigCPtr, this, handle));
  }

  public FMOD_RESULT getOutputByPlugin(SWIGTYPE_p_unsigned_int handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getOutputByPlugin(swigCPtr, this, SWIGTYPE_p_unsigned_int.getCPtr(handle)));
  }

  public FMOD_RESULT createDSPByPlugin(long handle, DSP dsp) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createDSPByPlugin(swigCPtr, this, handle, dsp));
  }

  public FMOD_RESULT getDSPInfoByPlugin(long handle, SWIGTYPE_p_p_FMOD_DSP_DESCRIPTION description) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getDSPInfoByPlugin(swigCPtr, this, handle, SWIGTYPE_p_p_FMOD_DSP_DESCRIPTION.getCPtr(description)));
  }

  public FMOD_RESULT registerCodec(SWIGTYPE_p_FMOD_CODEC_DESCRIPTION description, SWIGTYPE_p_unsigned_int handle, long priority) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_registerCodec__SWIG_0(swigCPtr, this, SWIGTYPE_p_FMOD_CODEC_DESCRIPTION.getCPtr(description), SWIGTYPE_p_unsigned_int.getCPtr(handle), priority));
  }

  public FMOD_RESULT registerCodec(SWIGTYPE_p_FMOD_CODEC_DESCRIPTION description, SWIGTYPE_p_unsigned_int handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_registerCodec__SWIG_1(swigCPtr, this, SWIGTYPE_p_FMOD_CODEC_DESCRIPTION.getCPtr(description), SWIGTYPE_p_unsigned_int.getCPtr(handle)));
  }

  public FMOD_RESULT registerDSP(SWIGTYPE_p_FMOD_DSP_DESCRIPTION description, SWIGTYPE_p_unsigned_int handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_registerDSP(swigCPtr, this, SWIGTYPE_p_FMOD_DSP_DESCRIPTION.getCPtr(description), SWIGTYPE_p_unsigned_int.getCPtr(handle)));
  }

  public FMOD_RESULT registerOutput(SWIGTYPE_p_FMOD_OUTPUT_DESCRIPTION description, SWIGTYPE_p_unsigned_int handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_registerOutput(swigCPtr, this, SWIGTYPE_p_FMOD_OUTPUT_DESCRIPTION.getCPtr(description), SWIGTYPE_p_unsigned_int.getCPtr(handle)));
  }

  public FMOD_RESULT init(int maxchannels, long flags, SWIGTYPE_p_void extradriverdata) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_init(swigCPtr, this, maxchannels, flags, SWIGTYPE_p_void.getCPtr(extradriverdata)));
  }

  public FMOD_RESULT close() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_close(swigCPtr, this));
  }

  public FMOD_RESULT update() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_update(swigCPtr, this));
  }

  public FMOD_RESULT setSpeakerPosition(FMOD_SPEAKER speaker, float x, float y, boolean active) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setSpeakerPosition(swigCPtr, this, speaker.swigValue(), x, y, active));
  }

  public FMOD_RESULT getSpeakerPosition(FMOD_SPEAKER speaker, SWIGTYPE_p_float x, SWIGTYPE_p_float y, SWIGTYPE_p_bool active) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getSpeakerPosition(swigCPtr, this, speaker.swigValue(), SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y), SWIGTYPE_p_bool.getCPtr(active)));
  }

  public FMOD_RESULT setStreamBufferSize(long filebuffersize, long filebuffersizetype) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setStreamBufferSize(swigCPtr, this, filebuffersize, filebuffersizetype));
  }

  public FMOD_RESULT getStreamBufferSize(SWIGTYPE_p_unsigned_int filebuffersize, SWIGTYPE_p_unsigned_int filebuffersizetype) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getStreamBufferSize(swigCPtr, this, SWIGTYPE_p_unsigned_int.getCPtr(filebuffersize), SWIGTYPE_p_unsigned_int.getCPtr(filebuffersizetype)));
  }

  public FMOD_RESULT set3DSettings(float dopplerscale, float distancefactor, float rolloffscale) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_set3DSettings(swigCPtr, this, dopplerscale, distancefactor, rolloffscale));
  }

  public FMOD_RESULT get3DSettings(SWIGTYPE_p_float dopplerscale, SWIGTYPE_p_float distancefactor, SWIGTYPE_p_float rolloffscale) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_get3DSettings(swigCPtr, this, SWIGTYPE_p_float.getCPtr(dopplerscale), SWIGTYPE_p_float.getCPtr(distancefactor), SWIGTYPE_p_float.getCPtr(rolloffscale)));
  }

  public FMOD_RESULT set3DNumListeners(int numlisteners) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_set3DNumListeners(swigCPtr, this, numlisteners));
  }

  public FMOD_RESULT get3DNumListeners(SWIGTYPE_p_int numlisteners) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_get3DNumListeners(swigCPtr, this, SWIGTYPE_p_int.getCPtr(numlisteners)));
  }

  public FMOD_RESULT set3DListenerAttributes(int listener, FMOD_VECTOR pos, FMOD_VECTOR vel, FMOD_VECTOR forward, FMOD_VECTOR up) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_set3DListenerAttributes(swigCPtr, this, listener, FMOD_VECTOR.getCPtr(pos), pos, FMOD_VECTOR.getCPtr(vel), vel, FMOD_VECTOR.getCPtr(forward), forward, FMOD_VECTOR.getCPtr(up), up));
  }

  public FMOD_RESULT get3DListenerAttributes(int listener, FMOD_VECTOR pos, FMOD_VECTOR vel, FMOD_VECTOR forward, FMOD_VECTOR up) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_get3DListenerAttributes(swigCPtr, this, listener, FMOD_VECTOR.getCPtr(pos), pos, FMOD_VECTOR.getCPtr(vel), vel, FMOD_VECTOR.getCPtr(forward), forward, FMOD_VECTOR.getCPtr(up), up));
  }

  public FMOD_RESULT set3DRolloffCallback(SWIGTYPE_p_f_p_FMOD_CHANNELCONTROL_float__float callback) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_set3DRolloffCallback(swigCPtr, this, SWIGTYPE_p_f_p_FMOD_CHANNELCONTROL_float__float.getCPtr(callback)));
  }

  public FMOD_RESULT mixerSuspend() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_mixerSuspend(swigCPtr, this));
  }

  public FMOD_RESULT mixerResume() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_mixerResume(swigCPtr, this));
  }

  public FMOD_RESULT getVersion(SWIGTYPE_p_unsigned_int version) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getVersion(swigCPtr, this, SWIGTYPE_p_unsigned_int.getCPtr(version)));
  }

  public FMOD_RESULT getOutputHandle(SWIGTYPE_p_p_void handle) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getOutputHandle(swigCPtr, this, SWIGTYPE_p_p_void.getCPtr(handle)));
  }

  public FMOD_RESULT getChannelsPlaying(SWIGTYPE_p_int channels) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getChannelsPlaying(swigCPtr, this, SWIGTYPE_p_int.getCPtr(channels)));
  }

  public FMOD_RESULT getCPUUsage(SWIGTYPE_p_float dsp, SWIGTYPE_p_float stream, SWIGTYPE_p_float geometry, SWIGTYPE_p_float update, SWIGTYPE_p_float total) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getCPUUsage(swigCPtr, this, SWIGTYPE_p_float.getCPtr(dsp), SWIGTYPE_p_float.getCPtr(stream), SWIGTYPE_p_float.getCPtr(geometry), SWIGTYPE_p_float.getCPtr(update), SWIGTYPE_p_float.getCPtr(total)));
  }

  public FMOD_RESULT getSoundRAM(SWIGTYPE_p_int currentalloced, SWIGTYPE_p_int maxalloced, SWIGTYPE_p_int total) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getSoundRAM(swigCPtr, this, SWIGTYPE_p_int.getCPtr(currentalloced), SWIGTYPE_p_int.getCPtr(maxalloced), SWIGTYPE_p_int.getCPtr(total)));
  }

  public FMOD_RESULT createSound(String name_or_data, long mode, FMOD_CREATESOUNDEXINFO exinfo, Sound sound) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createSound(swigCPtr, this, name_or_data, mode, FMOD_CREATESOUNDEXINFO.getCPtr(exinfo), exinfo, sound));
  }

  public FMOD_RESULT createStream(String name_or_data, long mode, FMOD_CREATESOUNDEXINFO exinfo, Sound sound) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createStream(swigCPtr, this, name_or_data, mode, FMOD_CREATESOUNDEXINFO.getCPtr(exinfo), exinfo, sound));
  }

  public FMOD_RESULT createDSP(SWIGTYPE_p_FMOD_DSP_DESCRIPTION description, DSP dsp) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createDSP(swigCPtr, this, SWIGTYPE_p_FMOD_DSP_DESCRIPTION.getCPtr(description), dsp));
  }

  public FMOD_RESULT createDSPByType(SWIGTYPE_p_FMOD_DSP_TYPE type, DSP dsp) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createDSPByType(swigCPtr, this, SWIGTYPE_p_FMOD_DSP_TYPE.getCPtr(type), dsp));
  }

  public FMOD_RESULT createChannelGroup(String name, ChannelGroup channelgroup) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createChannelGroup(swigCPtr, this, name, channelgroup));
  }

  public FMOD_RESULT createSoundGroup(String name, SoundGroup soundgroup) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createSoundGroup(swigCPtr, this, name, soundgroup));
  }

  public FMOD_RESULT createReverb3D(Reverb3D reverb) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createReverb3D(swigCPtr, this, reverb));
  }

  public FMOD_RESULT playSound(Sound sound, ChannelGroup channelgroup, boolean paused, Channel channel) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_playSound(swigCPtr, this, Sound.getCPtr(sound), sound, ChannelGroup.getCPtr(channelgroup), channelgroup, paused, channel));
  }

  public FMOD_RESULT playDSP(DSP dsp, ChannelGroup channelgroup, boolean paused, Channel channel) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_playDSP(swigCPtr, this, DSP.getCPtr(dsp), dsp, ChannelGroup.getCPtr(channelgroup), channelgroup, paused, channel));
  }

  public FMOD_RESULT getChannel(int channelid, Channel channel) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getChannel(swigCPtr, this, channelid, channel));
  }

  public FMOD_RESULT getMasterChannelGroup(ChannelGroup channelgroup) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getMasterChannelGroup(swigCPtr, this, channelgroup));
  }

  public FMOD_RESULT getMasterSoundGroup(SoundGroup soundgroup) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getMasterSoundGroup(swigCPtr, this, soundgroup));
  }

  public FMOD_RESULT attachChannelGroupToPort(long portType, java.math.BigInteger portIndex, ChannelGroup channelgroup, boolean passThru) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_attachChannelGroupToPort__SWIG_0(swigCPtr, this, portType, portIndex, ChannelGroup.getCPtr(channelgroup), channelgroup, passThru));
  }

  public FMOD_RESULT attachChannelGroupToPort(long portType, java.math.BigInteger portIndex, ChannelGroup channelgroup) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_attachChannelGroupToPort__SWIG_1(swigCPtr, this, portType, portIndex, ChannelGroup.getCPtr(channelgroup), channelgroup));
  }

  public FMOD_RESULT detachChannelGroupFromPort(ChannelGroup channelgroup) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_detachChannelGroupFromPort(swigCPtr, this, ChannelGroup.getCPtr(channelgroup), channelgroup));
  }

  public FMOD_RESULT setReverbProperties(int instance, FMOD_REVERB_PROPERTIES prop) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setReverbProperties(swigCPtr, this, instance, FMOD_REVERB_PROPERTIES.getCPtr(prop), prop));
  }

  public FMOD_RESULT getReverbProperties(int instance, FMOD_REVERB_PROPERTIES prop) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getReverbProperties(swigCPtr, this, instance, FMOD_REVERB_PROPERTIES.getCPtr(prop), prop));
  }

  public FMOD_RESULT lockDSP() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_lockDSP(swigCPtr, this));
  }

  public FMOD_RESULT unlockDSP() {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_unlockDSP(swigCPtr, this));
  }

  public FMOD_RESULT getRecordNumDrivers(SWIGTYPE_p_int numdrivers) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getRecordNumDrivers(swigCPtr, this, SWIGTYPE_p_int.getCPtr(numdrivers)));
  }

  public FMOD_RESULT getRecordDriverInfo(int id, String name, int namelen, FMOD_GUID guid, SWIGTYPE_p_int systemrate, SWIGTYPE_p_FMOD_SPEAKERMODE speakermode, SWIGTYPE_p_int speakermodechannels) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getRecordDriverInfo(swigCPtr, this, id, name, namelen, FMOD_GUID.getCPtr(guid), guid, SWIGTYPE_p_int.getCPtr(systemrate), SWIGTYPE_p_FMOD_SPEAKERMODE.getCPtr(speakermode), SWIGTYPE_p_int.getCPtr(speakermodechannels)));
  }

  public FMOD_RESULT getRecordPosition(int id, SWIGTYPE_p_unsigned_int position) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getRecordPosition(swigCPtr, this, id, SWIGTYPE_p_unsigned_int.getCPtr(position)));
  }

  public FMOD_RESULT recordStart(int id, Sound sound, boolean loop) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_recordStart(swigCPtr, this, id, Sound.getCPtr(sound), sound, loop));
  }

  public FMOD_RESULT recordStop(int id) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_recordStop(swigCPtr, this, id));
  }

  public FMOD_RESULT isRecording(int id, SWIGTYPE_p_bool recording) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_isRecording(swigCPtr, this, id, SWIGTYPE_p_bool.getCPtr(recording)));
  }

  public FMOD_RESULT createGeometry(int maxpolygons, int maxvertices, SWIGTYPE_p_p_FMOD__Geometry geometry) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_createGeometry(swigCPtr, this, maxpolygons, maxvertices, SWIGTYPE_p_p_FMOD__Geometry.getCPtr(geometry)));
  }

  public FMOD_RESULT setGeometrySettings(float maxworldsize) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setGeometrySettings(swigCPtr, this, maxworldsize));
  }

  public FMOD_RESULT getGeometrySettings(SWIGTYPE_p_float maxworldsize) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getGeometrySettings(swigCPtr, this, SWIGTYPE_p_float.getCPtr(maxworldsize)));
  }

  public FMOD_RESULT loadGeometry(SWIGTYPE_p_void data, int datasize, SWIGTYPE_p_p_FMOD__Geometry geometry) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_loadGeometry(swigCPtr, this, SWIGTYPE_p_void.getCPtr(data), datasize, SWIGTYPE_p_p_FMOD__Geometry.getCPtr(geometry)));
  }

  public FMOD_RESULT getGeometryOcclusion(FMOD_VECTOR listener, FMOD_VECTOR source, SWIGTYPE_p_float direct, SWIGTYPE_p_float reverb) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getGeometryOcclusion(swigCPtr, this, FMOD_VECTOR.getCPtr(listener), listener, FMOD_VECTOR.getCPtr(source), source, SWIGTYPE_p_float.getCPtr(direct), SWIGTYPE_p_float.getCPtr(reverb)));
  }

  public FMOD_RESULT setNetworkProxy(String proxy) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setNetworkProxy(swigCPtr, this, proxy));
  }

  public FMOD_RESULT getNetworkProxy(String proxy, int proxylen) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getNetworkProxy(swigCPtr, this, proxy, proxylen));
  }

  public FMOD_RESULT setNetworkTimeout(int timeout) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setNetworkTimeout(swigCPtr, this, timeout));
  }

  public FMOD_RESULT getNetworkTimeout(SWIGTYPE_p_int timeout) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getNetworkTimeout(swigCPtr, this, SWIGTYPE_p_int.getCPtr(timeout)));
  }

  public FMOD_RESULT setUserData(SWIGTYPE_p_void userdata) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_setUserData(swigCPtr, this, SWIGTYPE_p_void.getCPtr(userdata)));
  }

  public FMOD_RESULT getUserData(SWIGTYPE_p_p_void userdata) {
    return FMOD_RESULT.swigToEnum(javafmodJNI.FMOD_System_getUserData(swigCPtr, this, SWIGTYPE_p_p_void.getCPtr(userdata)));
  }

}
